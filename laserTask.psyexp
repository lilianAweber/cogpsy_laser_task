<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.1.2">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': '000', 'order': '1'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="False" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="True" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1366, 768]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="SaveTheWorld" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="SR Research Ltd" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="blockStartText">
      <CodeComponent name="code_blockStart">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="sourceImageFile = os.path.join(imageRoot, sourceImage);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#determine radioactive source image&amp;#10;sourceImageFile = os.path.join(imageRoot,sourceImage)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_blockStart" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="radioactive_block_source">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$sourceImageFile" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="radioactive_block_source" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_sourceImage">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_sourceImage" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Please try to keep you eyes as fixed as possible on the centre of the screen.&amp;#10;&amp;#10;New source ahead:&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Press any key if you're ready to start." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_blockStart">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_blockStart" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <ParallelOutComponent name="blockStart_trigger">
        <Param val="0x4FF8" valType="str" updates="None" name="address"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="blockStart_trigger" valType="code" updates="None" name="name"/>
        <Param val="EIO" valType="str" updates="None" name="register"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="10" valType="code" updates="None" name="startData"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="0" valType="code" updates="None" name="stopData"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.05" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreen"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
      </ParallelOutComponent>
    </Routine>
    <Routine name="blockEndText">
      <CodeComponent name="code_blockRew">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="rewardFeedback = `£${totalReward}`;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="rewardFeedback = &quot;£%.2f&quot; %(totalReward)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_blockRew" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textPause">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textPause" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Well done. In this block, you earned:&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Take a short break." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="textReward">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textReward" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$rewardFeedback" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="textContinue">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textContinue" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="5.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Press any key to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_blockEnd">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_blockEnd" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="5.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <ParallelOutComponent name="blockEnd_reward_trigger">
        <Param val="0x4FF8" valType="str" updates="None" name="address"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="blockEnd_reward_trigger" valType="code" updates="None" name="name"/>
        <Param val="EIO" valType="str" updates="None" name="register"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="20" valType="code" updates="None" name="startData"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="0" valType="code" updates="None" name="stopData"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.05" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreen"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
      </ParallelOutComponent>
    </Routine>
    <Routine name="instructed_move">
      <CodeComponent name="code_move_i">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="training_loop_count = (training_loop_count + 1);&amp;#10;if ((training_loop_count === 0)) {&amp;#10;    shieldRotation = 360;&amp;#10;}&amp;#10;target_orientations = [163, 356, 271];&amp;#10;target_orientation = target_orientations[training_loop_count];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="training_loop_count = training_loop_count + 1&amp;#10;&amp;#10;if training_loop_count == 0:&amp;#10;    shieldRotation = 360;&amp;#10;&amp;#10;target_orientations = [163, 356, 271]&amp;#10;&amp;#10;target_orientation = target_orientations[training_loop_count]" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        &amp;#10;if shieldRotation%360 == target_orientation%360:&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;    }&amp;#10;}&amp;#10;if (((shieldRotation % 360) === (target_orientation % 360))) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_move_i" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="shield_move_i">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_move_i" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_centre_move_i">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="blue" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="blue" valType="color" updates="constant" name="lineColor"/>
        <Param val="3" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_centre_move_i" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="set every frame" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.1]]" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_bg_short_move_i">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_bg_short_move_i" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="target_move_i">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="red" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="red" valType="color" updates="constant" name="lineColor"/>
        <Param val="3" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="target_move_i" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="target_orientation" valType="num" updates="set every repeat" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.1]]" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <ImageComponent name="radioactive_move_i">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/radioactive1.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="radioactive_move_i" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_move_i">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_move_i" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You will now do some practice trials. Move the shield so that the radiation hits the shield in its centre." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="practiceSize">
      <CodeComponent name="code_size">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="UDkeys_pressed = kb.getKeys(keyList=keys_size,clear=True,waitRelease=False)&amp;#10;&amp;#10;if len(UDkeys_pressed)&gt;0:&amp;#10;    if UDkeys_pressed[-1]==key_up:&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;    if UDkeys_pressed[-1]==key_down:&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;&amp;#10;#set lower boundary on shieldWidth&amp;#10;if shieldDegrees &lt; minShieldDegrees:&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;    &amp;#10;#set upper boundary on shieldWidth&amp;#10;if shieldDegrees &gt; maxShieldDegrees:&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;    &amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="UDkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_size, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;if ((UDkeys_pressed.length &gt; 0)) {&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_up)) {&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;    }&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_down)) {&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;    }&amp;#10;}&amp;#10;if ((shieldDegrees &lt; minShieldDegrees)) {&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;}&amp;#10;if ((shieldDegrees &gt; maxShieldDegrees)) {&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;}&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_size" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="shield_size">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_size" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_centre_size">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="blue" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="blue" valType="color" updates="constant" name="lineColor"/>
        <Param val="3" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_centre_size" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.1]]" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_bg_short_size">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_bg_short_size" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <ImageComponent name="radio_size">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/radioactive1.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="radio_size" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_size_s1">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_size_s1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="To change the shield size, you can use the &quot;3&quot; and &quot;4&quot; buttons on your response box. Try changing the shield size now!&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;If you have understood how to change the shield size, &amp;#10;press button &quot;1&quot; to advance to the next screen." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_size_s2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_size_s2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.05)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="To change the shield size, you can use the &quot;1&quot; and &quot;2&quot; buttons on your response box. Try changing the shield size now!&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;If you have understood how to change the shield size, &amp;#10;press button &quot;3&quot; to advance to the next screen." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_size_s1">
        <Param val="'1'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_size_s1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <KeyboardComponent name="key_resp_size_s2">
        <Param val="'3'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_size_s2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <ParallelOutComponent name="sizeTraining_trigger">
        <Param val="0x4FF8" valType="str" updates="None" name="address"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="sizeTraining_trigger" valType="code" updates="None" name="name"/>
        <Param val="EIO" valType="str" updates="None" name="register"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="102" valType="code" updates="None" name="startData"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="0" valType="code" updates="None" name="stopData"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.05" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreen"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
      </ParallelOutComponent>
    </Routine>
    <Routine name="trial">
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="shieldDegrees = 25;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;rootdir = os.getcwd();&amp;#10;stimStreamPath = os.path.join(rootdir, &quot;stimgen&quot;, blockFileName);&amp;#10;storedStream_np = np.loadtxt(stimStreamPath, {&quot;delimiter&quot;: &quot;,&quot;});&amp;#10;shieldRotation = 360;&amp;#10;nFrames = (np.shape(storedStream_np)[0] - 1);&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[[0, 1]];&amp;#10;laserXcoord = (CIRCLE_RADIUS * Math.cos(deg2rad(laserRotation)));&amp;#10;laserYcoord = (CIRCLE_RADIUS * Math.sin(deg2rad(laserRotation)));&amp;#10;hit_i = 0;&amp;#10;first_hit = 0;&amp;#10;triggerValue = 11;&amp;#10;sendTrigger = true;&amp;#10;sendResponseTriggers = true;&amp;#10;square_colour = &quot;black&quot;;&amp;#10;top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;bar_length_array = np.zeros(nFrames);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#initialise variables that will be updated as experiment progresses&amp;#10;shieldDegrees = 25; #because it needs to be predefined&amp;#10;&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;#load stimulusStream into NumPy array&amp;#10;rootdir = os.getcwd()&amp;#10;stimStreamPath = os.path.join(rootdir,'stimgen',blockFileName)&amp;#10;storedStream_np = np.loadtxt(stimStreamPath,delimiter=&quot;,&quot;)&amp;#10;&amp;#10;shieldRotation = 360; #begin at top&amp;#10;&amp;#10;#calculate the total number of frames in the experiment&amp;#10;nFrames = np.shape(storedStream_np)[0] - 1;&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[0,1];&amp;#10;&amp;#10;#update variables to draw polygon&amp;#10;laserXcoord = CIRCLE_RADIUS*cos(deg2rad(laserRotation));&amp;#10;laserYcoord = CIRCLE_RADIUS*sin(deg2rad(laserRotation));&amp;#10;&amp;#10;hit_i = 0&amp;#10;first_hit = 0&amp;#10;&amp;#10;triggerValue = 11&amp;#10;sendTrigger = True&amp;#10;#start by sending a trigger when subject presses a button&amp;#10;sendResponseTriggers = True&amp;#10;&amp;#10;square_colour = 'black'&amp;#10;&amp;#10;top_amount_text = '£'+str(top_amount)&amp;#10;bottom_amount_text = '£'+str(bottom_amount)&amp;#10;&amp;#10;bar_length_array = np.zeros(nFrames);" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#determine whether laser is crossing the shield&amp;#10;if hit_i:&amp;#10;    hit_i = 0&amp;#10;else:&amp;#10;    if first_hit:&amp;#10;        laser_long.setAutoDraw(True)&amp;#10;&amp;#10;if bar_length &lt;= 0:&amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = top_amount - 1;&amp;#10;    bottom_amount = bottom_amount - 1;&amp;#10;    top_amount_text = '£'+str(top_amount)&amp;#10;    bottom_amount_text = '£'+str(bottom_amount)&amp;#10;        &amp;#10;if square_colour == 'black':&amp;#10;    colour_id = 1&amp;#10;if square_colour == 'white':&amp;#10;    colour_id = 2&amp;#10;&amp;#10;#do not send a trigger on every frame, only if laser position changes or subject presses a button&amp;#10;sendTrigger = False&amp;#10;keyReleaseThisFrame = False&amp;#10;##win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;&amp;#10;#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;    triggerValue = 7&amp;#10;    sendTrigger = True&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;    keyReleaseThisFrame = True&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;UDkeys_pressed = kb.getKeys(keyList=keys_size,clear=True,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4&amp;#10;    if sendResponseTriggers:&amp;#10;        print(shieldRotation)&amp;#10;        triggerValue = newTriggerValue&amp;#10;        sendTrigger = True&amp;#10;        #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;        #stop triggering responses until key has been released again&amp;#10;        sendResponseTriggers = False&amp;#10;&amp;#10;if len(UDkeys_pressed)&gt;0:&amp;#10;    if UDkeys_pressed[-1]==key_up:&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5&amp;#10;    if UDkeys_pressed[-1]==key_down:&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6&amp;#10;    sendTrigger = True&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#set lower boundary on shieldWidth&amp;#10;if shieldDegrees &lt; minShieldDegrees:&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;    &amp;#10;#set upper boundary on shieldWidth&amp;#10;if shieldDegrees &gt; maxShieldDegrees:&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;    &amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;if currentFrame&lt;nFrames:&amp;#10;    laserRotation = storedStream_np[currentFrame,1];&amp;#10;&amp;#10;#calculate whether shield is currently hit by laser&amp;#10;currentHit = (shieldRotation - laserRotation + shieldDegrees)%360 &lt;= (2*shieldDegrees);&amp;#10;&amp;#10;#determine whether laser position has changed&amp;#10;if currentFrame &gt; 1:&amp;#10;    if storedStream_np[currentFrame,1] != storedStream_np[currentFrame-1,1]:&amp;#10;        #we only send a stimulus trigger if we don't already have a response to send&amp;#10;        if not sendTrigger:&amp;#10;            #we'll send different stim change triggers depending on hit/no-hit&amp;#10;            if currentHit:&amp;#10;                triggerValue = 1&amp;#10;            else:&amp;#10;                triggerValue = 2&amp;#10;&amp;#10;            if colour_id == 1:&amp;#10;                square_colour = 'white'&amp;#10;            elif colour_id == 2:&amp;#10;                square_colour = 'black'&amp;#10;            &amp;#10;            sendTrigger = True&amp;#10;            ##win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#update the shieldRedness according to whether we are currently hitting/missing the shield&amp;#10;if currentHit:&amp;#10;    if shieldDegrees == 25:&amp;#10;        laser_long_opacity = 0;&amp;#10;    if shieldDegrees == 45:&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    if shieldDegrees == 65:&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    &amp;#10;    bar_length = bar_length - (0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;    totalReward = totalReward - (0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;    red_bar_length = (0.0001 - 0.0000555556*45/shieldDegrees)*100;&amp;#10;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    hit_i = 1&amp;#10;    first_hit = 1&amp;#10;else:&amp;#10;    laser_long_opacity = 1&amp;#10;    &amp;#10;    laser_long.setAutoDraw(True)&amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    bar_length = bar_length - 0.0001;&amp;#10;    totalReward = totalReward - 0.0001;&amp;#10;    red_bar_length = 0.0001*100;&amp;#10;&amp;#10;if keyReleaseThisFrame:&amp;#10;    sendResponseTriggers = True&amp;#10;    &amp;#10;if currentFrame&lt;nFrames:&amp;#10;    saveData.append([blockID,currentFrame,laserRotation,shieldRotation,shieldDegrees,currentHit,totalReward,sendTrigger,triggerValue])&amp;#10;    currentFrame = currentFrame + 1;&amp;#10;else:&amp;#10;    triggerValue = 99&amp;#10;    sendTrigger = True&amp;#10;    ##win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;        &amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (hit_i) {&amp;#10;    hit_i = 0;&amp;#10;} else {&amp;#10;    if (first_hit) {&amp;#10;        laser_long.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;if ((bar_length &lt;= 0)) {&amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = (top_amount - 1);&amp;#10;    bottom_amount = (bottom_amount - 1);&amp;#10;    top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;    bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;}&amp;#10;if ((square_colour === &quot;black&quot;)) {&amp;#10;    colour_id = 1;&amp;#10;}&amp;#10;if ((square_colour === &quot;white&quot;)) {&amp;#10;    colour_id = 2;&amp;#10;}&amp;#10;sendTrigger = false;&amp;#10;keyReleaseThisFrame = false;&amp;#10;LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;    triggerValue = 7;&amp;#10;    sendTrigger = true;&amp;#10;    keyReleaseThisFrame = true;&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;UDkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_size, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4;&amp;#10;    }&amp;#10;    if (sendResponseTriggers) {&amp;#10;        console.log(shieldRotation);&amp;#10;        triggerValue = newTriggerValue;&amp;#10;        sendTrigger = true;&amp;#10;        sendResponseTriggers = false;&amp;#10;    }&amp;#10;}&amp;#10;if ((UDkeys_pressed.length &gt; 0)) {&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_up)) {&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5;&amp;#10;    }&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_down)) {&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6;&amp;#10;    }&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;if ((shieldDegrees &lt; minShieldDegrees)) {&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;}&amp;#10;if ((shieldDegrees &gt; maxShieldDegrees)) {&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;}&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    laserRotation = storedStream_np[[currentFrame, 1]];&amp;#10;}&amp;#10;currentHit = ((((shieldRotation - laserRotation) + shieldDegrees) % 360) &lt;= (2 * shieldDegrees));&amp;#10;if ((currentFrame &gt; 1)) {&amp;#10;    if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;        if ((! sendTrigger)) {&amp;#10;            if (currentHit) {&amp;#10;                triggerValue = 1;&amp;#10;            } else {&amp;#10;                triggerValue = 2;&amp;#10;            }&amp;#10;            if ((colour_id === 1)) {&amp;#10;                square_colour = &quot;white&quot;;&amp;#10;            } else {&amp;#10;                if ((colour_id === 2)) {&amp;#10;                    square_colour = &quot;black&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;            sendTrigger = true;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (currentHit) {&amp;#10;    if ((shieldDegrees === 25)) {&amp;#10;        laser_long_opacity = 0;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 45)) {&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 65)) {&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    }&amp;#10;    bar_length = (bar_length - (0.0001 - ((5.55556e-05 * 45) / shieldDegrees)));&amp;#10;    totalReward = (totalReward - (0.0001 - ((5.55556e-05 * 45) / shieldDegrees)));&amp;#10;    red_bar_length = ((0.0001 - ((5.55556e-05 * 45) / shieldDegrees)) * 100);&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    hit_i = 1;&amp;#10;    first_hit = 1;&amp;#10;} else {&amp;#10;    laser_long_opacity = 1;&amp;#10;    laser_long.setAutoDraw(true);&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    bar_length = (bar_length - 0.0001);&amp;#10;    totalReward = (totalReward - 0.0001);&amp;#10;    red_bar_length = (0.0001 * 100);&amp;#10;}&amp;#10;if (keyReleaseThisFrame) {&amp;#10;    sendResponseTriggers = true;&amp;#10;}&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    saveData.push([blockID, currentFrame, laserRotation, shieldRotation, shieldDegrees, currentHit, totalReward, sendTrigger, triggerValue]);&amp;#10;    currentFrame = (currentFrame + 1);&amp;#10;} else {&amp;#10;    triggerValue = 99;&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="np.savetxt(saveFilename, saveData, {&quot;delimiter&quot;: &quot;,&quot;, &quot;fmt&quot;: &quot;%s&quot;});&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="np.savetxt(saveFilename,saveData,delimiter=&quot;,&quot;,fmt=&quot;%s&quot;)&amp;#10;##win.callOnFlip(trialTrigger.setData, int(0))" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_reset2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="shieldDegrees = 25;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;rootdir = os.getcwd();&amp;#10;stimStreamPath = os.path.join(rootdir, &quot;stimgen&quot;, blockFileName);&amp;#10;storedStream_np = np.loadtxt(stimStreamPath, {&quot;delimiter&quot;: &quot;,&quot;});&amp;#10;shieldRotation = 360;&amp;#10;nFrames = (np.shape(storedStream_np)[0] - 1);&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[[0, 1]];&amp;#10;trueMean = storedStream_np[[0, 0]];&amp;#10;trueVariance = storedStream_np[[0, 2]];&amp;#10;laserXcoord = (CIRCLE_RADIUS * Math.cos(deg2rad(laserRotation)));&amp;#10;laserYcoord = (CIRCLE_RADIUS * Math.sin(deg2rad(laserRotation)));&amp;#10;hit_i = 0;&amp;#10;first_hit = 0;&amp;#10;triggerValue = 11;&amp;#10;sendTrigger = true;&amp;#10;sendResponseTriggers = true;&amp;#10;square_colour = &quot;black&quot;;&amp;#10;if ((wins === 0)) {&amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = 2;&amp;#10;    bottom_amount = 1;&amp;#10;    totalReward = 2;&amp;#10;    reward_change_colour = [1, (- 1), (- 1)];&amp;#10;} else {&amp;#10;    top_amount = 4;&amp;#10;    bottom_amount = 3;&amp;#10;    totalReward = 3.5;&amp;#10;    reward_change_colour = [(- 1), (- 1), 1];&amp;#10;}&amp;#10;top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;[unique, counts] = np.unique(storedStream_np, {&quot;return_counts&quot;: true});&amp;#10;laser_on = Math.min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;laser.setAutoDraw(false);&amp;#10;laser_long.setAutoDraw(false);&amp;#10;progress_bar_length = 0;&amp;#10;pb_orientation = 0;&amp;#10;pb_degrees = 0;&amp;#10;pb_X = ((np.sin(np.arange(np.radians((- pb_degrees)), np.radians(pb_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pb_Y = ((np.cos(np.arange(np.radians((- pb_degrees)), np.radians(pb_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pb_X = np.concatenate([[0], pb_X]);&amp;#10;pb_Y = np.concatenate([[0], pb_Y]);&amp;#10;pb_coords = np.transpose(np.vstack([pb_X, pb_Y]));&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#run_trial()&amp;#10;&amp;#10;#initialise variables that will be updated as experiment progresses&amp;#10;shieldDegrees = 25; #because it needs to be predefined&amp;#10;&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;#load stimulusStream into NumPy array&amp;#10;rootdir = os.getcwd()&amp;#10;stimStreamPath = os.path.join(rootdir,'stimgen',blockFileName)&amp;#10;storedStream_np = np.loadtxt(stimStreamPath,delimiter=&quot;,&quot;)&amp;#10;&amp;#10;shieldRotation = 360; #begin at top&amp;#10;&amp;#10;#calculate the total number of frames in the experiment&amp;#10;nFrames = np.shape(storedStream_np)[0] - 1;&amp;#10;currentFrame = 0;&amp;#10;laserRotation = storedStream_np[0,1];&amp;#10;trueMean = storedStream_np[0,0];&amp;#10;trueVariance = storedStream_np[0,2];&amp;#10;&amp;#10;#update variables to draw polygon&amp;#10;laserXcoord = CIRCLE_RADIUS*cos(deg2rad(laserRotation));&amp;#10;laserYcoord = CIRCLE_RADIUS*sin(deg2rad(laserRotation));&amp;#10;&amp;#10;hit_i = 0&amp;#10;first_hit = 0&amp;#10;&amp;#10;triggerValue = 11&amp;#10;sendTrigger = True&amp;#10;#start by sending a trigger when subject presses a button&amp;#10;sendResponseTriggers = True&amp;#10;&amp;#10;square_colour = 'black'&amp;#10;&amp;#10;if wins == 0:&amp;#10;    &amp;#10;    bar_length = 0.5;&amp;#10;    top_amount = 2;&amp;#10;    bottom_amount = 1;&amp;#10;&amp;#10;    totalReward = 2;&amp;#10;    &amp;#10;    reward_change_colour = [1, -1, -1];&amp;#10;else:&amp;#10;    &amp;#10;    top_amount = 4;&amp;#10;    bottom_amount = 3;&amp;#10;    &amp;#10;    totalReward = 3.5;&amp;#10;    reward_change_colour = [-1, -1, 1];&amp;#10;&amp;#10;top_amount_text = '£'+str(top_amount)&amp;#10;bottom_amount_text = '£'+str(bottom_amount)&amp;#10;&amp;#10;unique, counts = np.unique(storedStream_np, return_counts=True);&amp;#10;laser_on = min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;&amp;#10;laser.setAutoDraw(False);&amp;#10;laser_long.setAutoDraw(False);&amp;#10;&amp;#10;progress_bar_length = 0;&amp;#10;pb_orientation = 0;&amp;#10;pb_degrees = 0;&amp;#10;pb_X=np.sin(np.arange(np.radians(-pb_degrees),np.radians(pb_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pb_Y=np.cos(np.arange(np.radians(-pb_degrees),np.radians(pb_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pb_X = np.concatenate(([0],pb_X));&amp;#10;pb_Y = np.concatenate(([0],pb_Y));&amp;#10;pb_coords = np.transpose(np.vstack((pb_X,pb_Y)))" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#determine whether laser is crossing the shield&amp;#10;if hit_i:&amp;#10;    hit_i = 0&amp;#10;else:&amp;#10;    if first_hit:&amp;#10;        laser_long.setAutoDraw(True)&amp;#10;&amp;#10;if wins == 0:&amp;#10;    if bar_length &lt;= 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = top_amount - 1;&amp;#10;        bottom_amount = bottom_amount - 1;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;    &amp;#10;if wins == 1:&amp;#10;    if bar_length &gt;= 0.5:&amp;#10;        bar_length = 0.001;&amp;#10;        top_amount = top_amount + 1;&amp;#10;        bottom_amount = bottom_amount + 1;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;    if bar_length &lt;= 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = top_amount - 1;&amp;#10;        bottom_amount = bottom_amount - 1;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;        &amp;#10;if totalReward &lt;= 0:&amp;#10;    if wins == 0:&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;        &amp;#10;        totalReward = 1;&amp;#10;    if wins == 1:&amp;#10;        bar_length = 0.00001;&amp;#10;        red_bar_length = 0;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = '£'+str(top_amount);&amp;#10;        bottom_amount_text = '£'+str(bottom_amount);&amp;#10;        &amp;#10;        totalReward = 0;&amp;#10;        &amp;#10;if square_colour == 'black':&amp;#10;    colour_id = 1&amp;#10;if square_colour == 'white':&amp;#10;    colour_id = 2&amp;#10;&amp;#10;#do not send a trigger on every frame, only if laser position changes or subject presses a button&amp;#10;sendTrigger = False&amp;#10;keyReleaseThisFrame = False&amp;#10;##win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;&amp;#10;#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;    triggerValue = 7&amp;#10;    sendTrigger = True&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;    keyReleaseThisFrame = True&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;UDkeys_pressed = kb.getKeys(keyList=keys_size,clear=True,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4&amp;#10;    if sendResponseTriggers:&amp;#10;        triggerValue = newTriggerValue&amp;#10;        sendTrigger = True&amp;#10;        #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;        #stop triggering responses until key has been released again&amp;#10;        sendResponseTriggers = False&amp;#10;&amp;#10;if len(UDkeys_pressed)&gt;0:&amp;#10;    if UDkeys_pressed[-1]==key_up:&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5&amp;#10;    if UDkeys_pressed[-1]==key_down:&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6&amp;#10;    sendTrigger = True&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#set lower boundary on shieldWidth&amp;#10;if shieldDegrees &lt; minShieldDegrees:&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;    &amp;#10;#set upper boundary on shieldWidth&amp;#10;if shieldDegrees &gt; maxShieldDegrees:&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;    &amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;if currentFrame&lt;nFrames:&amp;#10;    laserRotation = storedStream_np[currentFrame,1];&amp;#10;    trueMean = storedStream_np[currentFrame,0];&amp;#10;    trueVariance = storedStream_np[currentFrame,2];&amp;#10;    if currentFrame &gt; 0:&amp;#10;        if storedStream_np[currentFrame, 1] != storedStream_np[currentFrame - 1, 1]:&amp;#10;            laser_frame_ct = 0;&amp;#10;        else:&amp;#10;            laser_frame_ct = laser_frame_ct + 1;&amp;#10;&amp;#10;        if laser_frame_ct &lt;= laser_on:&amp;#10;            laser.setAutoDraw(True);&amp;#10;            laser_long.setAutoDraw(True);&amp;#10;        else:&amp;#10;            laser.setAutoDraw(False);&amp;#10;            laser_long.setAutoDraw(False);&amp;#10;&amp;#10;#calculate whether shield is currently hit by laser&amp;#10;currentHit = (shieldRotation - laserRotation + shieldDegrees)%360 &lt;= (2*shieldDegrees);&amp;#10;&amp;#10;#determine whether laser position has changed&amp;#10;if currentFrame &gt; 1:&amp;#10;    if storedStream_np[currentFrame,1] != storedStream_np[currentFrame-1,1]:&amp;#10;        #we only send a stimulus trigger if we don't already have a response to send&amp;#10;        if not sendTrigger:&amp;#10;            #we'll send different stim change triggers depending on hit/no-hit&amp;#10;            if currentHit:&amp;#10;                triggerValue = 1&amp;#10;            else:&amp;#10;                triggerValue = 2&amp;#10;&amp;#10;            if colour_id == 1:&amp;#10;                square_colour = 'white'&amp;#10;            elif colour_id == 2:&amp;#10;                square_colour = 'black'&amp;#10;            &amp;#10;            sendTrigger = True&amp;#10;            ##win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;#update the shieldRedness according to whether we are currently hitting/missing the shield&amp;#10;if currentHit:&amp;#10;    if shieldDegrees == 25:&amp;#10;        laser_long_opacity = 0;&amp;#10;    if shieldDegrees == 45:&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    if shieldDegrees == 65:&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    if wins == 0:&amp;#10;        bar_length = bar_length - (0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;        totalReward = totalReward - 2*(0.0001 - 0.0000555556*45/shieldDegrees);&amp;#10;        red_bar_length = (0.0001 - 0.0000555556*45/shieldDegrees)*100;&amp;#10;    if wins == 1:&amp;#10;        if shieldDegrees == 25:&amp;#10;            bar_length = bar_length + 0.00003;&amp;#10;            totalReward = totalReward + 2*0.00003;&amp;#10;            red_bar_length = 0.00003*100;&amp;#10;            reward_change_colour = [-1, 1, -1];&amp;#10;&amp;#10;        if shieldDegrees == 45:&amp;#10;            bar_length = bar_length;&amp;#10;            totalReward = totalReward;&amp;#10;            red_bar_length = 0;&amp;#10;            reward_change_colour = [-1, -1, 1];&amp;#10;            &amp;#10;        if shieldDegrees == 65:&amp;#10;            if totalReward &gt; 0:&amp;#10;                bar_length = bar_length - 0.00003;&amp;#10;                totalReward = totalReward - 2*0.00003;&amp;#10;                red_bar_length = 0.00003*100;&amp;#10;            else:&amp;#10;                bar_length = 0;&amp;#10;                totalReward = 0;&amp;#10;                red_bar_length = 0;&amp;#10;            reward_change_colour = [1, -1, -1];&amp;#10;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    hit_i = 1&amp;#10;    first_hit = 1&amp;#10;else:&amp;#10;    laser_long_opacity = 1&amp;#10;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;    &amp;#10;    if totalReward &gt; 0:&amp;#10;        bar_length = bar_length - 0.0001;&amp;#10;        totalReward = totalReward - 2*0.0001;&amp;#10;        red_bar_length = 0.0001*100;&amp;#10;    else:&amp;#10;        bar_length = 0.00001;&amp;#10;        totalReward = 0;&amp;#10;        red_bar_length = 0;&amp;#10;    &amp;#10;    if wins == 1:&amp;#10;        reward_change_colour = [1, -1, -1];&amp;#10;&amp;#10;if keyReleaseThisFrame:&amp;#10;    sendResponseTriggers = True&amp;#10;    &amp;#10;if currentFrame&lt;nFrames:&amp;#10;    saveData.append([blockID,currentFrame,laserRotation,shieldRotation,shieldDegrees,currentHit,totalReward,sendTrigger,triggerValue,trueMean,trueVariance,volatility])&amp;#10;    currentFrame = currentFrame + 1;&amp;#10;else:&amp;#10;    triggerValue = 99&amp;#10;    sendTrigger = True&amp;#10;    ##win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;    &amp;#10;progress_bar_length = progress_bar_length + 0.8/nFrames;&amp;#10;&amp;#10;pb_orientation = pb_orientation + (360/nFrames)/2;&amp;#10;pb_degrees = pb_degrees + (360/nFrames)/2;&amp;#10;pb_X=np.sin(np.arange(np.radians(-pb_degrees),np.radians(pb_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pb_Y=np.cos(np.arange(np.radians(-pb_degrees),np.radians(pb_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pb_X = np.concatenate(([0],pb_X));&amp;#10;pb_Y = np.concatenate(([0],pb_Y));&amp;#10;pb_coords = np.transpose(np.vstack((pb_X,pb_Y)))" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (hit_i) {&amp;#10;    hit_i = 0;&amp;#10;} else {&amp;#10;    if (first_hit) {&amp;#10;        laser_long.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;if ((wins === 0)) {&amp;#10;    if ((bar_length &lt;= 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = (top_amount - 1);&amp;#10;        bottom_amount = (bottom_amount - 1);&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;    }&amp;#10;}&amp;#10;if ((wins === 1)) {&amp;#10;    if ((bar_length &gt;= 0.5)) {&amp;#10;        bar_length = 0.001;&amp;#10;        top_amount = (top_amount + 1);&amp;#10;        bottom_amount = (bottom_amount + 1);&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;    }&amp;#10;    if ((bar_length &lt;= 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = (top_amount - 1);&amp;#10;        bottom_amount = (bottom_amount - 1);&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;    }&amp;#10;}&amp;#10;if ((totalReward &lt;= 0)) {&amp;#10;    if ((wins === 0)) {&amp;#10;        bar_length = 0.5;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;        totalReward = 1;&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        bar_length = 1e-05;&amp;#10;        red_bar_length = 0;&amp;#10;        top_amount = 1;&amp;#10;        bottom_amount = 0;&amp;#10;        top_amount_text = (&quot;\u00a3&quot; + top_amount.toString());&amp;#10;        bottom_amount_text = (&quot;\u00a3&quot; + bottom_amount.toString());&amp;#10;        totalReward = 0;&amp;#10;    }&amp;#10;}&amp;#10;if ((square_colour === &quot;black&quot;)) {&amp;#10;    colour_id = 1;&amp;#10;}&amp;#10;if ((square_colour === &quot;white&quot;)) {&amp;#10;    colour_id = 2;&amp;#10;}&amp;#10;sendTrigger = false;&amp;#10;keyReleaseThisFrame = false;&amp;#10;LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;    triggerValue = 7;&amp;#10;    sendTrigger = true;&amp;#10;    keyReleaseThisFrame = true;&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;UDkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_size, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4;&amp;#10;    }&amp;#10;    if (sendResponseTriggers) {&amp;#10;        triggerValue = newTriggerValue;&amp;#10;        sendTrigger = true;&amp;#10;        sendResponseTriggers = false;&amp;#10;    }&amp;#10;}&amp;#10;if ((UDkeys_pressed.length &gt; 0)) {&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_up)) {&amp;#10;        shieldDegrees += SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 5;&amp;#10;    }&amp;#10;    if ((UDkeys_pressed.slice((- 1))[0] === key_down)) {&amp;#10;        shieldDegrees -= SHIELD_GROWTH_SPEED;&amp;#10;        triggerValue = 6;&amp;#10;    }&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;if ((shieldDegrees &lt; minShieldDegrees)) {&amp;#10;    shieldDegrees = minShieldDegrees;&amp;#10;}&amp;#10;if ((shieldDegrees &gt; maxShieldDegrees)) {&amp;#10;    shieldDegrees = maxShieldDegrees;&amp;#10;}&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    laserRotation = storedStream_np[[currentFrame, 1]];&amp;#10;    trueMean = storedStream_np[[currentFrame, 0]];&amp;#10;    trueVariance = storedStream_np[[currentFrame, 2]];&amp;#10;    if ((currentFrame &gt; 0)) {&amp;#10;        if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;            laser_frame_ct = 0;&amp;#10;        } else {&amp;#10;            laser_frame_ct = (laser_frame_ct + 1);&amp;#10;        }&amp;#10;        if ((laser_frame_ct &lt;= laser_on)) {&amp;#10;            laser.setAutoDraw(true);&amp;#10;            laser_long.setAutoDraw(true);&amp;#10;        } else {&amp;#10;            laser.setAutoDraw(false);&amp;#10;            laser_long.setAutoDraw(false);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;currentHit = ((((shieldRotation - laserRotation) + shieldDegrees) % 360) &lt;= (2 * shieldDegrees));&amp;#10;if ((currentFrame &gt; 1)) {&amp;#10;    if ((storedStream_np[[currentFrame, 1]] !== storedStream_np[[(currentFrame - 1), 1]])) {&amp;#10;        if ((! sendTrigger)) {&amp;#10;            if (currentHit) {&amp;#10;                triggerValue = 1;&amp;#10;            } else {&amp;#10;                triggerValue = 2;&amp;#10;            }&amp;#10;            if ((colour_id === 1)) {&amp;#10;                square_colour = &quot;white&quot;;&amp;#10;            } else {&amp;#10;                if ((colour_id === 2)) {&amp;#10;                    square_colour = &quot;black&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;            sendTrigger = true;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (currentHit) {&amp;#10;    if ((shieldDegrees === 25)) {&amp;#10;        laser_long_opacity = 0;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 45)) {&amp;#10;        laser_long_opacity = 0.1;&amp;#10;    }&amp;#10;    if ((shieldDegrees === 65)) {&amp;#10;        laser_long_opacity = 0.3;&amp;#10;    }&amp;#10;    if ((wins === 0)) {&amp;#10;        bar_length = (bar_length - (0.0001 - ((5.55556e-05 * 45) / shieldDegrees)));&amp;#10;        totalReward = (totalReward - (2 * (0.0001 - ((5.55556e-05 * 45) / shieldDegrees))));&amp;#10;        red_bar_length = ((0.0001 - ((5.55556e-05 * 45) / shieldDegrees)) * 100);&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        if ((shieldDegrees === 25)) {&amp;#10;            bar_length = (bar_length + 3e-05);&amp;#10;            totalReward = (totalReward + (2 * 3e-05));&amp;#10;            red_bar_length = (3e-05 * 100);&amp;#10;            reward_change_colour = [(- 1), 1, (- 1)];&amp;#10;        }&amp;#10;        if ((shieldDegrees === 45)) {&amp;#10;            bar_length = bar_length;&amp;#10;            totalReward = totalReward;&amp;#10;            red_bar_length = 0;&amp;#10;            reward_change_colour = [(- 1), (- 1), 1];&amp;#10;        }&amp;#10;        if ((shieldDegrees === 65)) {&amp;#10;            if ((totalReward &gt; 0)) {&amp;#10;                bar_length = (bar_length - 3e-05);&amp;#10;                totalReward = (totalReward - (2 * 3e-05));&amp;#10;                red_bar_length = (3e-05 * 100);&amp;#10;            } else {&amp;#10;                bar_length = 0;&amp;#10;                totalReward = 0;&amp;#10;                red_bar_length = 0;&amp;#10;            }&amp;#10;            reward_change_colour = [1, (- 1), (- 1)];&amp;#10;        }&amp;#10;    }&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    hit_i = 1;&amp;#10;    first_hit = 1;&amp;#10;} else {&amp;#10;    laser_long_opacity = 1;&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;    if ((totalReward &gt; 0)) {&amp;#10;        bar_length = (bar_length - 0.0001);&amp;#10;        totalReward = (totalReward - (2 * 0.0001));&amp;#10;        red_bar_length = (0.0001 * 100);&amp;#10;    } else {&amp;#10;        bar_length = 1e-05;&amp;#10;        totalReward = 0;&amp;#10;        red_bar_length = 0;&amp;#10;    }&amp;#10;    if ((wins === 1)) {&amp;#10;        reward_change_colour = [1, (- 1), (- 1)];&amp;#10;    }&amp;#10;}&amp;#10;if (keyReleaseThisFrame) {&amp;#10;    sendResponseTriggers = true;&amp;#10;}&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    saveData.push([blockID, currentFrame, laserRotation, shieldRotation, shieldDegrees, currentHit, totalReward, sendTrigger, triggerValue, trueMean, trueVariance, volatility]);&amp;#10;    currentFrame = (currentFrame + 1);&amp;#10;} else {&amp;#10;    triggerValue = 99;&amp;#10;    sendTrigger = true;&amp;#10;}&amp;#10;progress_bar_length = (progress_bar_length + (0.8 / nFrames));&amp;#10;pb_orientation = (pb_orientation + ((360 / nFrames) / 2));&amp;#10;pb_degrees = (pb_degrees + ((360 / nFrames) / 2));&amp;#10;pb_X = ((np.sin(np.arange(np.radians((- pb_degrees)), np.radians(pb_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pb_Y = ((np.cos(np.arange(np.radians((- pb_degrees)), np.radians(pb_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pb_X = np.concatenate([[0], pb_X]);&amp;#10;pb_Y = np.concatenate([[0], pb_Y]);&amp;#10;pb_coords = np.transpose(np.vstack([pb_X, pb_Y]));&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="print(totalReward_tot)" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="console.log(totalReward_tot);&amp;#10;" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="totalReward_tot = (totalReward_tot + totalReward);&amp;#10;totalReward_text = (&quot;\u00a3&quot; + totalReward.toString());&amp;#10;np.savetxt(saveFilename, saveData, {&quot;delimiter&quot;: &quot;,&quot;, &quot;fmt&quot;: &quot;%s&quot;});&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="totalReward_tot = totalReward_tot + totalReward;&amp;#10;totalReward_text = '£'+str(totalReward)&amp;#10;&amp;#10;np.savetxt(saveFilename,saveData,delimiter=&quot;,&quot;,fmt=&quot;%s&quot;)&amp;#10;##win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="code_reset2" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="code_changeRewPos">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="phaseN = 1;&amp;#10;block_path = (sequenceRoot + blockFileName);&amp;#10;f = open(block_path, &quot;r&quot;);&amp;#10;storedStream_np = [];&amp;#10;for (var line, _pj_c = 0, _pj_a = f, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    line = _pj_a[_pj_c];&amp;#10;    words = line.split(&quot;,&quot;);&amp;#10;    storedStream_np.push([words[0], words[1], words[2]]);&amp;#10;}&amp;#10;nFrames = (storedStream_np.length - 2);&amp;#10;currentFrame = 0;&amp;#10;storedStream_np.pop(0);&amp;#10;trueMean = Number.parseFloat(storedStream_np[0][0]);&amp;#10;laserRotation = Number.parseFloat(storedStream_np[0][1]);&amp;#10;trueVariance = Number.parseFloat(storedStream_np[0][2]);&amp;#10;hit_i = 0;&amp;#10;first_hit = 0;&amp;#10;triggerValue = 11;&amp;#10;sendTrigger = true;&amp;#10;sendResponseTriggers = true;&amp;#10;totalReward = 1;&amp;#10;shieldDegrees = 20;&amp;#10;shieldRotation = 360;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;laserXcoord = (CIRCLE_RADIUS * Math.cos(deg2rad(laserRotation)));&amp;#10;laserYcoord = (CIRCLE_RADIUS * Math.sin(deg2rad(laserRotation)));&amp;#10;[unique, counts] = np.unique(storedStream_np, {&quot;return_counts&quot;: true});&amp;#10;laser_on = Math.min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;laser.setAutoDraw(false);&amp;#10;laser_long.setAutoDraw(false);&amp;#10;pc_orientation = 0;&amp;#10;pc_degrees = 0;&amp;#10;pc_X = ((np.sin(np.arange(np.radians((- pc_degrees)), np.radians(pc_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pc_Y = ((np.cos(np.arange(np.radians((- pc_degrees)), np.radians(pc_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pc_X = np.concatenate([[0], pc_X]);&amp;#10;pc_Y = np.concatenate([[0], pc_Y]);&amp;#10;pc_coords = np.transpose(np.vstack([pc_X, pc_Y]));&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# this is the actual experiment&amp;#10;phaseN = 1&amp;#10;&amp;#10;#load stimulusStream into NumPy array&amp;#10;block_path = sequenceRoot + blockFileName&amp;#10;f = open(block_path, 'r')&amp;#10;storedStream_np = []&amp;#10;for line in f:&amp;#10;    words = line.split(',')&amp;#10;    storedStream_np.append((words[0], words[1], words[2]))&amp;#10;    &amp;#10;#calculate the total number of frames in this block&amp;#10;nFrames = len(storedStream_np) - 2 # try debug IndexError:list index out of range&amp;#10;currentFrame = 0&amp;#10;&amp;#10;#the ValueError: could not convert string to float error originates here&amp;#10;#need to start reading from the 2nd row rather than the 1st row (with header text)&amp;#10;#let's get rid of the first row since it's giving us headaches&amp;#10;storedStream_np.pop(0)&amp;#10;&amp;#10;trueMean = float(storedStream_np[0][0])&amp;#10;laserRotation = float(storedStream_np[0][1])&amp;#10;trueVariance = float(storedStream_np[0][2])&amp;#10;&amp;#10;#initialise variables that will be updated as experiment progresses&amp;#10;hit_i = 0&amp;#10;first_hit = 0&amp;#10;&amp;#10;triggerValue = 11&amp;#10;sendTrigger = True&amp;#10;#start by sending a trigger when subject presses a button&amp;#10;sendResponseTriggers = True&amp;#10;totalReward = 1;&amp;#10;&amp;#10;shieldDegrees = 20; #because it needs to be predefined&amp;#10;shieldRotation = 360 #begin at top&amp;#10;&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;#update variables to draw polygon&amp;#10;laserXcoord = CIRCLE_RADIUS*cos(deg2rad(laserRotation));&amp;#10;laserYcoord = CIRCLE_RADIUS*sin(deg2rad(laserRotation));&amp;#10;&amp;#10;unique, counts = np.unique(storedStream_np, return_counts=True);&amp;#10;laser_on = min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;&amp;#10;laser.setAutoDraw(False);&amp;#10;laser_long.setAutoDraw(False);&amp;#10;&amp;#10;#progress circle variables&amp;#10;pc_orientation = 0;&amp;#10;pc_degrees = 0;&amp;#10;pc_X=np.sin(np.arange(np.radians(-pc_degrees),np.radians(pc_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pc_Y=np.cos(np.arange(np.radians(-pc_degrees),np.radians(pc_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pc_X = np.concatenate(([0],pc_X));&amp;#10;pc_Y = np.concatenate(([0],pc_Y));&amp;#10;pc_coords = np.transpose(np.vstack((pc_X,pc_Y)))" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#determine whether laser is crossing the shield&amp;#10;if hit_i:&amp;#10;    hit_i = 0&amp;#10;else:&amp;#10;    if first_hit:&amp;#10;        laser_long.setAutoDraw(True)&amp;#10;        &amp;#10;if totalReward &lt;= 0:&amp;#10;    totalReward = 0.1;&amp;#10;&amp;#10;#do not send a trigger on every frame, only if laser position changes or subject presses a button&amp;#10;sendTrigger = False&amp;#10;keyReleaseThisFrame = False&amp;#10;triggerValue = 0&amp;#10;send_trigger(triggerValue)&amp;#10;#win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;&amp;#10;#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;    triggerValue = 7&amp;#10;    sendTrigger = True&amp;#10;    send_trigger(triggerValue)&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;    keyReleaseThisFrame = True&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4&amp;#10;    if sendResponseTriggers:&amp;#10;        triggerValue = newTriggerValue&amp;#10;        sendTrigger = True&amp;#10;        send_trigger(triggerValue)&amp;#10;        #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;        #stop triggering responses until key has been released again&amp;#10;        sendResponseTriggers = False&amp;#10;&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;shieldX = np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY = np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;if currentFrame&lt;nFrames:&amp;#10;    laserRotation = float(storedStream_np[currentFrame][1])#storedStream_np[currentFrame,1];&amp;#10;    trueMean = float(storedStream_np[currentFrame][0])#storedStream_np[currentFrame,0];&amp;#10;    trueVariance = float(storedStream_np[currentFrame][2])#storedStream_np[currentFrame,2];&amp;#10;    if currentFrame &gt; 0:&amp;#10;        if float(storedStream_np[currentFrame][1]) != float(storedStream_np[currentFrame-1][1]):#storedStream_np[currentFrame - 1, 1]:&amp;#10;        #if currentFrame &gt; 1:&amp;#10;            laser_frame_ct = 0;&amp;#10;        else:&amp;#10;            laser_frame_ct = laser_frame_ct + 1;&amp;#10;&amp;#10;        if laser_frame_ct &lt;= laser_on:&amp;#10;            laser.setAutoDraw(True);&amp;#10;            laser_long.setAutoDraw(True);&amp;#10;        else:&amp;#10;            laser.setAutoDraw(False);&amp;#10;            laser_long.setAutoDraw(False);&amp;#10;&amp;#10;#calculate whether shield is currently hit by laser&amp;#10;currentHit = (shieldRotation - laserRotation + shieldDegrees)%360 &lt;= (2*shieldDegrees);&amp;#10;&amp;#10;#determine whether laser position has changed&amp;#10;if currentFrame == 0:&amp;#10;    if not sendTrigger:&amp;#10;        #we'll send different stim change triggers depending on hit/no-hit&amp;#10;        if currentHit:&amp;#10;            triggerValue = 1&amp;#10;        else:&amp;#10;            triggerValue = 2&amp;#10;&amp;#10;        sendTrigger = True&amp;#10;        send_trigger(triggerValue)&amp;#10;        #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;    if currentHit:&amp;#10;        totalReward = totalReward;&amp;#10;        hit_i = 1;&amp;#10;        first_hit = 1;&amp;#10;    else:&amp;#10;        if totalReward &gt; 0:&amp;#10;            totalReward = totalReward - lossFactor;&amp;#10;        else:&amp;#10;            totalReward = 0;&amp;#10;        &amp;#10;if currentFrame &gt; 0:&amp;#10;    if float(storedStream_np[currentFrame][1]) != float(storedStream_np[currentFrame-1][1]):&amp;#10;        #we only send a stimulus trigger if we don't already have a response to send&amp;#10;        if not sendTrigger:&amp;#10;            #we'll send different stim change triggers depending on hit/no-hit&amp;#10;            if currentHit:&amp;#10;                triggerValue = 1&amp;#10;            else:&amp;#10;                triggerValue = 2&amp;#10;&amp;#10;            sendTrigger = True&amp;#10;            send_trigger(triggerValue)&amp;#10;            #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;        if currentHit:&amp;#10;            totalReward = totalReward;&amp;#10;            hit_i = 1;&amp;#10;            first_hit = 1;&amp;#10;        else:&amp;#10;            if totalReward &gt; 0:&amp;#10;                totalReward = totalReward - lossFactor;&amp;#10;            else:&amp;#10;                totalReward = 0;&amp;#10;&amp;#10;#update the shieldRedness according to whether we are currently hitting/missing the shield&amp;#10;if currentHit:&amp;#10;    laser_long_opacity = 0;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;else:&amp;#10;    laser_long_opacity = 1&amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;&amp;#10;if keyReleaseThisFrame:&amp;#10;    sendResponseTriggers = True&amp;#10;    &amp;#10;if currentFrame&lt;nFrames:&amp;#10;    saveData.append([phaseN,blockID,currentFrame,laserRotation,&amp;#10;    shieldRotation,shieldDegrees,currentHit,totalReward,&amp;#10;    sendTrigger,triggerValue,trueMean,trueVariance,volatility,&amp;#10;    toneTrig,toneVolatility,toneIndex,toneEndFrame])&amp;#10;    currentFrame = currentFrame + 1;&amp;#10;else:&amp;#10;    triggerValue = 99&amp;#10;    sendTrigger = True&amp;#10;    send_trigger(triggerValue)&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;pc_orientation = pc_orientation + (360/nFrames)/2;&amp;#10;pc_degrees = pc_degrees + (360/nFrames)/2;&amp;#10;pc_X=np.sin(np.arange(np.radians(-pc_degrees),np.radians(pc_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pc_Y=np.cos(np.arange(np.radians(-pc_degrees),np.radians(pc_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pc_X = np.concatenate(([0],pc_X));&amp;#10;pc_Y = np.concatenate(([0],pc_Y));&amp;#10;pc_coords = np.transpose(np.vstack((pc_X,pc_Y)));" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (hit_i) {&amp;#10;    hit_i = 0;&amp;#10;} else {&amp;#10;    if (first_hit) {&amp;#10;        laser_long.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;if ((totalReward &lt;= 0)) {&amp;#10;    totalReward = 0.1;&amp;#10;}&amp;#10;sendTrigger = false;&amp;#10;keyReleaseThisFrame = false;&amp;#10;triggerValue = 0;&amp;#10;send_trigger(triggerValue);&amp;#10;LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;    triggerValue = 7;&amp;#10;    sendTrigger = true;&amp;#10;    send_trigger(triggerValue);&amp;#10;    keyReleaseThisFrame = true;&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4;&amp;#10;    }&amp;#10;    if (sendResponseTriggers) {&amp;#10;        triggerValue = newTriggerValue;&amp;#10;        sendTrigger = true;&amp;#10;        send_trigger(triggerValue);&amp;#10;        sendResponseTriggers = false;&amp;#10;    }&amp;#10;}&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    laserRotation = Number.parseFloat(storedStream_np[currentFrame][1]);&amp;#10;    trueMean = Number.parseFloat(storedStream_np[currentFrame][0]);&amp;#10;    trueVariance = Number.parseFloat(storedStream_np[currentFrame][2]);&amp;#10;    if ((currentFrame &gt; 0)) {&amp;#10;        if ((Number.parseFloat(storedStream_np[currentFrame][1]) !== Number.parseFloat(storedStream_np[(currentFrame - 1)][1]))) {&amp;#10;            laser_frame_ct = 0;&amp;#10;        } else {&amp;#10;            laser_frame_ct = (laser_frame_ct + 1);&amp;#10;        }&amp;#10;        if ((laser_frame_ct &lt;= laser_on)) {&amp;#10;            laser.setAutoDraw(true);&amp;#10;            laser_long.setAutoDraw(true);&amp;#10;        } else {&amp;#10;            laser.setAutoDraw(false);&amp;#10;            laser_long.setAutoDraw(false);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;currentHit = ((((shieldRotation - laserRotation) + shieldDegrees) % 360) &lt;= (2 * shieldDegrees));&amp;#10;if ((currentFrame === 0)) {&amp;#10;    if ((! sendTrigger)) {&amp;#10;        if (currentHit) {&amp;#10;            triggerValue = 1;&amp;#10;        } else {&amp;#10;            triggerValue = 2;&amp;#10;        }&amp;#10;        sendTrigger = true;&amp;#10;        send_trigger(triggerValue);&amp;#10;    }&amp;#10;    if (currentHit) {&amp;#10;        totalReward = totalReward;&amp;#10;        hit_i = 1;&amp;#10;        first_hit = 1;&amp;#10;    } else {&amp;#10;        if ((totalReward &gt; 0)) {&amp;#10;            totalReward = (totalReward - lossFactor);&amp;#10;        } else {&amp;#10;            totalReward = 0;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((currentFrame &gt; 0)) {&amp;#10;    if ((Number.parseFloat(storedStream_np[currentFrame][1]) !== Number.parseFloat(storedStream_np[(currentFrame - 1)][1]))) {&amp;#10;        if ((! sendTrigger)) {&amp;#10;            if (currentHit) {&amp;#10;                triggerValue = 1;&amp;#10;            } else {&amp;#10;                triggerValue = 2;&amp;#10;            }&amp;#10;            sendTrigger = true;&amp;#10;            send_trigger(triggerValue);&amp;#10;        }&amp;#10;        if (currentHit) {&amp;#10;            totalReward = totalReward;&amp;#10;            hit_i = 1;&amp;#10;            first_hit = 1;&amp;#10;        } else {&amp;#10;            if ((totalReward &gt; 0)) {&amp;#10;                totalReward = (totalReward - lossFactor);&amp;#10;            } else {&amp;#10;                totalReward = 0;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (currentHit) {&amp;#10;    laser_long_opacity = 0;&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;} else {&amp;#10;    laser_long_opacity = 1;&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;}&amp;#10;if (keyReleaseThisFrame) {&amp;#10;    sendResponseTriggers = true;&amp;#10;}&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    saveData.push([phaseN, blockID, currentFrame, laserRotation, shieldRotation, shieldDegrees, currentHit, totalReward, sendTrigger, triggerValue, trueMean, trueVariance, volatility, toneTrig, toneVolatility, toneIndex, toneEndFrame]);&amp;#10;    currentFrame = (currentFrame + 1);&amp;#10;} else {&amp;#10;    triggerValue = 99;&amp;#10;    sendTrigger = true;&amp;#10;    send_trigger(triggerValue);&amp;#10;}&amp;#10;pc_orientation = (pc_orientation + ((360 / nFrames) / 2));&amp;#10;pc_degrees = (pc_degrees + ((360 / nFrames) / 2));&amp;#10;pc_X = ((np.sin(np.arange(np.radians((- pc_degrees)), np.radians(pc_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pc_Y = ((np.cos(np.arange(np.radians((- pc_degrees)), np.radians(pc_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pc_X = np.concatenate([[0], pc_X]);&amp;#10;pc_Y = np.concatenate([[0], pc_Y]);&amp;#10;pc_coords = np.transpose(np.vstack([pc_X, pc_Y]));&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="totalReward_tot = (totalReward_tot + totalReward);&amp;#10;totalReward_text = `£${totalReward}`;&amp;#10;np.savetxt(saveFilename, saveData, {&quot;delimiter&quot;: &quot;,&quot;, &quot;fmt&quot;: &quot;%s&quot;});&amp;#10;triggerValue = 0;&amp;#10;send_trigger(triggerValue);&amp;#10;sendTrigger = false;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="totalReward_tot = totalReward_tot + totalReward;&amp;#10;totalReward_text = &quot;£%.2f&quot; %(totalReward);&amp;#10;&amp;#10;# save the output data for this block&amp;#10;np.savetxt(saveFilename,saveData,delimiter=&quot;,&quot;,fmt=&quot;%s&quot;)&amp;#10;#win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;triggerValue = 0;&amp;#10;send_trigger(triggerValue)&amp;#10;sendTrigger = False;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_changeRewPos" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="harmless_area">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[0, 0, 0]" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="harmless_area" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(6.6, 6.6)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$shieldColour" valType="color" updates="set every frame" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_centre">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="blue" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="blue" valType="color" updates="constant" name="lineColor"/>
        <Param val="3" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_centre" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="set every frame" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.2]]" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_bg_short">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_bg_short" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="laser">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="red" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="red" valType="color" updates="constant" name="lineColor"/>
        <Param val="10" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="laser" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="laserRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.1]]" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="laser_long">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="red" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="red" valType="color" updates="constant" name="lineColor"/>
        <Param val="10" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="laser_long" valType="code" updates="None" name="name"/>
        <Param val="laser_long_opacity" valType="num" updates="set every frame" name="opacity"/>
        <Param val="laserRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.4]]" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="progress_bar">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="green" valType="color" updates="constant" name="lineColor"/>
        <Param val="10" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="progress_bar" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="pc_orientation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(0.3, 0.3)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="pc_coords" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <ImageComponent name="radioactive">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1, 1, 1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$sourceImageFile" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="radioactive" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ParallelOutComponent name="trialTrigger">
        <Param val="0x4FF8" valType="str" updates="None" name="address"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="0.01" valType="code" updates="None" name="durationEstim"/>
        <Param val="trialTrigger" valType="code" updates="None" name="name"/>
        <Param val="EIO" valType="str" updates="None" name="register"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="$triggerValue" valType="code" updates="None" name="startData"/>
        <Param val="0" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="$sendTrigger==True" valType="code" updates="None" name="startVal"/>
        <Param val="0" valType="code" updates="None" name="stopData"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreen"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
      </ParallelOutComponent>
      <PolygonComponent name="square_diode">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="black" valType="color" updates="set every frame" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="black" valType="color" updates="set every frame" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="square_diode" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="hgf/404" valType="list" updates="set every frame" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="(0.0625, 0.0625)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <EyetrackerRecordComponent name="etRecord">
        <Param val="Start and Stop" valType="str" updates="None" name="actionType"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="etRecord" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="frame N" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
      </EyetrackerRecordComponent>
      <CodeComponent name="code_mmn">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="#initialise some things&amp;#10;toneOnsets=[]&amp;#10;ISIs=[]&amp;#10;&amp;#10;# make tone sequence of S and Ds&amp;#10;toneFilePath = &quot;sequences/&quot;+toneSeqFileName;&amp;#10;&amp;#10;#load tone stimuli stream into NumPy array&amp;#10;f = open(toneFilePath, 'r');&amp;#10;toneStream_np = [];&amp;#10;for line in f:&amp;#10;    tones = line.split(',');&amp;#10;    toneStream_np.append(tones[0].strip());&amp;#10;&amp;#10;#  tone entry 0 is variable name, start at 1&amp;#10;toneIndex = 1&amp;#10;nTones = len(toneStream_np)-1&amp;#10;toneEndFrame = 0&amp;#10;&amp;#10;# current tone &amp;#10;toneCurr = toneStream_np[toneIndex]&amp;#10;if toneCurr == &quot;1&quot;:&amp;#10;    lastTone = 1&amp;#10;else:&amp;#10;    lastTone = 2&amp;#10;&amp;#10;# define the two tones&amp;#10;global tone1&amp;#10;global tone2&amp;#10;tone1 = sound.Sound(440, secs=0.05, stereo=True, hamming=True,&amp;#10;        syncToWin=True,  name='sound_short')&amp;#10;tone1.setVolume(1)&amp;#10;tone2 = sound.Sound(440, secs=0.1, stereo=True, hamming=True,&amp;#10;       syncToWin=True, name='sound_long')&amp;#10;tone2.setVolume(1)&amp;#10;&amp;#10;# ISIs corresponding to tones, in frames&amp;#10;# isi = soa - toneDuration&amp;#10;# isi1 = 450-100 *60/1000&amp;#10;isi1 = 24&amp;#10;# isi2 = 450-500 *60/1000&amp;#10;isi2 = 21&amp;#10; &amp;#10;# start with no tone and no ISI&amp;#10;toneIsPlaying = False&amp;#10;toneIsWaiting = False&amp;#10;toneTrig = 0&amp;#10;&amp;#10;# start with frame 0&amp;#10;iFrame = 0" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="# we want to present the tone every&amp;#10;# X seconds for the duration of the trial&amp;#10;# if the sound is not currently playing&amp;#10;&amp;#10;if phaseN &gt; 0:&amp;#10;    iFrame = iFrame +1&amp;#10;    if not toneIsPlaying and not toneIsWaiting:&amp;#10;        # pick how long we will wait for&amp;#10;        if lastTone == 1:&amp;#10;            thisISI = isi1-2 &amp;#10;            # this is in frames&amp;#10;            # we correct for 2 frames as wait a little longer&amp;#10;            # before stopping the tone (see below)&amp;#10;        else:&amp;#10;            thisISI = isi2-2&amp;#10;        #print('thisISI', thisISI)&amp;#10;        ISIs.append(thisISI)&amp;#10;        thisOnset = iFrame +thisISI&amp;#10;        #we are waiting for the sound to play&amp;#10;        toneIsWaiting = True&amp;#10;        toneTrig = 0&amp;#10;    elif not toneIsPlaying and toneIsWaiting:&amp;#10;        if iFrame &gt;= thisOnset:&amp;#10;            #getTone()&amp;#10;            print('playing')&amp;#10;            if toneCurr == &quot;1&quot;:&amp;#10;                tone1.play()&amp;#10;                toneTrig = triggers['tone_1']&amp;#10;                lastTone = 1&amp;#10;            elif toneCurr == &quot;2&quot;:&amp;#10;                tone2.play()&amp;#10;                toneTrig = triggers['tone_2']&amp;#10;                lastTone = 2&amp;#10;            toneOnsets.append(iFrame)&amp;#10;            send_trigger(toneTrig)&amp;#10;            toneIsPlaying = True&amp;#10;            toneIsWaiting = False&amp;#10;    elif toneIsPlaying:&amp;#10;        toneTrig = 0&amp;#10;        if toneCurr == &quot;1&quot;:&amp;#10;            if iFrame &gt;= thisOnset + tone1.secs*screen_refreshRate +1:&amp;#10;                toneEndFrame = iFrame&amp;#10;                if toneIndex &lt; nTones:&amp;#10;                    toneIndex += 1&amp;#10;                    print('tone number:')&amp;#10;                    print(toneIndex)&amp;#10;                    toneCurr = toneStream_np[toneIndex]&amp;#10;                    tone1.stop()&amp;#10;                    toneIsPlaying = False&amp;#10;                else:&amp;#10;                    # we have reached the end of the tone list&amp;#10;                    tone1.stop()&amp;#10;                    continueRoutine = False&amp;#10;        elif toneCurr == &quot;2&quot;:&amp;#10;            if iFrame &gt;= thisOnset + tone2.secs*screen_refreshRate +1:&amp;#10;                toneEndFrame = iFrame&amp;#10;                if toneIndex &lt; nTones:&amp;#10;                    toneIndex += 1&amp;#10;                    print('tone number:')&amp;#10;                    print(toneIndex)&amp;#10;                    toneCurr = toneStream_np[toneIndex]&amp;#10;                    tone2.stop()&amp;#10;                    toneIsPlaying = False&amp;#10;                else:&amp;#10;                    tone2.stop()&amp;#10;                    continueRoutine = False&amp;#10;&amp;#10;    # end the routine if the trial duration has been reached&amp;#10;    if currentFrame &gt; nFrames:&amp;#10;        toneIsPlaying = False&amp;#10;        toneIsWaiting = False&amp;#10;        continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((phaseN &gt; 0)) {&amp;#10;    iFrame = (iFrame + 1);&amp;#10;    if (((! toneIsPlaying) &amp;&amp; (! toneIsWaiting))) {&amp;#10;        if ((lastTone === 1)) {&amp;#10;            thisISI = (isi1 - 2);&amp;#10;        } else {&amp;#10;            thisISI = (isi2 - 2);&amp;#10;        }&amp;#10;        ISIs.push(thisISI);&amp;#10;        thisOnset = (iFrame + thisISI);&amp;#10;        toneIsWaiting = true;&amp;#10;        toneTrig = 0;&amp;#10;    } else {&amp;#10;        if (((! toneIsPlaying) &amp;&amp; toneIsWaiting)) {&amp;#10;            if ((iFrame &gt;= thisOnset)) {&amp;#10;                console.log(&quot;playing&quot;);&amp;#10;                if ((toneCurr === &quot;1&quot;)) {&amp;#10;                    tone1.play();&amp;#10;                    toneTrig = triggers[&quot;tone_1&quot;];&amp;#10;                    lastTone = 1;&amp;#10;                } else {&amp;#10;                    if ((toneCurr === &quot;2&quot;)) {&amp;#10;                        tone2.play();&amp;#10;                        toneTrig = triggers[&quot;tone_2&quot;];&amp;#10;                        lastTone = 2;&amp;#10;                    }&amp;#10;                }&amp;#10;                toneOnsets.push(iFrame);&amp;#10;                send_trigger(toneTrig);&amp;#10;                toneIsPlaying = true;&amp;#10;                toneIsWaiting = false;&amp;#10;            }&amp;#10;        } else {&amp;#10;            if (toneIsPlaying) {&amp;#10;                toneTrig = 0;&amp;#10;                if ((toneCurr === &quot;1&quot;)) {&amp;#10;                    if ((iFrame &gt;= ((thisOnset + (tone1.secs * screen_refreshRate)) + 1))) {&amp;#10;                        toneEndFrame = iFrame;&amp;#10;                        if ((toneIndex &lt; nTones)) {&amp;#10;                            toneIndex += 1;&amp;#10;                            console.log(&quot;tone number:&quot;);&amp;#10;                            console.log(toneIndex);&amp;#10;                            toneCurr = toneStream_np[toneIndex];&amp;#10;                            tone1.stop();&amp;#10;                            toneIsPlaying = false;&amp;#10;                        } else {&amp;#10;                            tone1.stop();&amp;#10;                            continueRoutine = false;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    if ((toneCurr === &quot;2&quot;)) {&amp;#10;                        if ((iFrame &gt;= ((thisOnset + (tone2.secs * screen_refreshRate)) + 1))) {&amp;#10;                            toneEndFrame = iFrame;&amp;#10;                            if ((toneIndex &lt; nTones)) {&amp;#10;                                toneIndex += 1;&amp;#10;                                console.log(&quot;tone number:&quot;);&amp;#10;                                console.log(toneIndex);&amp;#10;                                toneCurr = toneStream_np[toneIndex];&amp;#10;                                tone2.stop();&amp;#10;                                toneIsPlaying = false;&amp;#10;                            } else {&amp;#10;                                tone2.stop();&amp;#10;                                continueRoutine = false;&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    if ((currentFrame &gt; nFrames)) {&amp;#10;        toneIsPlaying = false;&amp;#10;        toneIsWaiting = false;&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_mmn" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="sizeExamples">
      <TextComponent name="text_size_examples">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_size_examples" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.23)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Remember that you can increase your shield size to capture radiation within a larger range.&amp;#10;&amp;#10;However, this comes at a cost: your shield becomes less efficient. If you catch radiation with a larger shield, some amount of radiation will still pass through and reach Earth. &amp;#10;&amp;#10;Below, you can see the shielding efficiency of &amp;#10;a small, medium, and large shield:" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_size_advance">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_size_advance" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.36)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Press any key to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="shield_all_sizes">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/shield_sml.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="shield_all_sizes" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.15)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.2, 0.25)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_size_examples">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_size_examples" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="sizeExamples_1">
      <TextComponent name="text_size_examples_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_size_examples_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.23)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="It is not only about catching the laser with the shield: the closer you place the centre of the shield to the laser, the less damage the latter does. The shield will let less and less radiations through, the closer the laser is to its centre, making the laser less and less visible. However, a larger shield lets more radiations through than a small one.&amp;#10;&amp;#10;You can see differences in laser visibility in the examples below." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_size_advance_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_size_advance_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.34)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="When you are ready to advance, press any button." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="shield_small_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/shield_small_vsb.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="shield_small_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.4, -0.13)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.25)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="shield_medium_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/shield_medium_vsb.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="shield_medium_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.13)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.25)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="shield_large_2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/shield_large_vsb.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="shield_large_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.4, -0.13)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.25, 0.25)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_size_examples_2">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_size_examples_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instructions_2">
      <TextComponent name="text_instructions_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_instructions_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.03)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Here you see one substance in the centre of the screen, its red radiation beam, and a white absorbing shield. In this example, the shield is not in the right position and thus the beam is not stopped and damages Earth.&amp;#10;​&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Your task is to manoeuvre the shield to catch as many emissions as possible. Press any key to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="shield_miss_earth">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/shield_miss_earth.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="shield_miss_earth" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.4, 0.373)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_i2">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_i2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="radio_colours">
      <ImageComponent name="radioactive_colour1">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/radioactive3.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="radioactive_colour1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-0.2, 0.11)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.2, 0.2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="radioactive_colour2">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/radioactive2.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="radioactive_colour2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0.2, 0.11)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(0.2, 0.2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_colours">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_colours" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You will encounter two different radioactive sources:&amp;#10;A red and a blue source.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;The difference between these sources is how often they change their emission angle over time, and therefore how often you will have to adjust your shield position. One of the sources will change its angle of attack more often, whereas the other will remain stable for longer.&amp;#10;&amp;#10;This game has 4 blocks. You will encounter each of the two sources twice. &amp;#10;Press any key to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_colours">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_colours" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="reward">
      <TextComponent name="text_reward">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_reward" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="In every block of this game, your reward for saving the world from this radiation starts off at £1. The more radiation you let through, the more reward you lose.&amp;#10;&amp;#10;Try to keep as much of that £1 as you can by catching as many beams as you can. After every block, you will receive feedback about how much reward you have earned in the previous block.&amp;#10;&amp;#10;Each block will last 3 minutes. A green circle will grow around the radioactive source, indicating how much time has passed. When the green circle is complete, the block is over.&amp;#10;&amp;#10;Press any key to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_reward">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_reward" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="transparence">
      <ImageComponent name="shield_as_transparence">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/shield_sml.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="shield_as_transparence" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.03)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1.2, 0.25)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_transparence">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_transparence" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Remember:&amp;#10;Because larger shields let some radiation through, you will still lose &amp;#10;a small amount of your reward even if you catch the radiation.&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Your task is to save the world from this harmful substance, &amp;#10;and keep as much of your reward by doing this!&amp;#10;&amp;#10;Ready?&amp;#10;Press any button to start playing the game." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_transparence">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_transparence" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="sessionEndText">
      <CodeComponent name="code_totRew">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="totRew_text = `£${totalReward_tot}`;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="totRew_text = &quot;£%.2f&quot; %(totalReward_tot);" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_totRew" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textEndSession">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="textEndSession" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Well done. You completed one session.&amp;#10;In this session, you made:&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;Take a break. " valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="finalReward_text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="finalReward_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$totRew_text" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ParallelOutComponent name="end_trigger">
        <Param val="0x4FF8" valType="str" updates="None" name="address"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="end_trigger" valType="code" updates="None" name="name"/>
        <Param val="EIO" valType="str" updates="None" name="register"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="105" valType="code" updates="None" name="startData"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="0" valType="code" updates="None" name="stopData"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.05" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreen"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
      </ParallelOutComponent>
    </Routine>
    <Routine name="instructions_practiceBlock">
      <TextComponent name="text_practiceBlock">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_practiceBlock" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You will now do a short practice block of the task. This block will only last 1 minute.&amp;#10;&amp;#10;As in the real game, the source will emit radiation, but the main angle of attack might change over time, so that you have to keep monitoring the beams and decide when to re-position your shield.&amp;#10;&amp;#10;You will see a reward bar on the right of the screen, which shows you how you lose money whenever a beam remains uncaught, but you will not actually earn any money during this practice. Remember to use the '1' and '2' buttons to navigate your shield.&amp;#10;&amp;#10;Press any key to start the practice block." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_practiceBlock">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_practiceBlock" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instructions_game">
      <CodeComponent name="code_start">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="# counters/setup&amp;#10;phaseN = 0&amp;#10;send_triggers = False&amp;#10;&amp;#10;# import modules&amp;#10;import numpy as np&amp;#10;import os&amp;#10;&amp;#10;# paths and filenames&amp;#10;# where sequences are stored&amp;#10;sequenceRoot = 'sequences/'&amp;#10;dataRoot = 'data/'&amp;#10;imageRoot = 'images/'&amp;#10;# retrieve the current session csv file&amp;#10;sessionFileName = (sequenceRoot + &quot;cogpsy_main_v1_order&quot; &amp;#10;    + str(expInfo['order']) + &quot;/session_s1_main_v1.csv&quot;)&amp;#10;    &amp;#10;# initialise list containing data to be saved&amp;#10;saveData = [[&quot;phase&quot;,&quot;blockID&quot;,&quot;currentFrame&quot;,&quot;laserRotation&quot;,&amp;#10;    &quot;shieldRotation&quot;,&quot;shieldDegrees&quot;,&quot;currentHit&quot;,&quot;totalReward&quot;,&amp;#10;    &quot;sendTrigger&quot;,&quot;triggerValue&quot;,&quot;trueMean&quot;,&quot;trueVariance&quot;,&amp;#10;    &quot;volatility&quot;,&quot;toneTrigger&quot;,&quot;toneVolatility&quot;,&quot;toneIndex&quot;,&quot;toneEndFrame&quot;]];&amp;#10;saveFilename = (dataRoot + &quot;sub-&quot; + str(expInfo['participant']) + &amp;#10;    &quot;_task-laser.csv&quot;)&amp;#10;    &amp;#10;#initialise list containing data to be saved&amp;#10;#saveData = [[&quot;blockID&quot;,&quot;currentFrame&quot;,&quot;laserRotation&quot;,&amp;#10;#    &quot;shieldRotation&quot;,&quot;shieldDegrees&quot;,&quot;currentHit&quot;,&quot;totalReward&quot;,&amp;#10;#    &quot;sendTrigger&quot;,&quot;triggerValue&quot;,&quot;trueMean&quot;,&quot;trueVariance&quot;,&amp;#10;#    &quot;volatility&quot;]]&amp;#10;#saveFilename = &quot;savedData_&quot; + str(expInfo['participant']) + &quot;.csv&quot; &amp;#10;&amp;#10;# hide the mouse&amp;#10;win.mouseVisible = False&amp;#10;&amp;#10;# keyboard constants&amp;#10;kb = keyboard.Keyboard()&amp;#10;keys_move = ['2', '1'];&amp;#10;key_right = '2';&amp;#10;key_left = '1';&amp;#10;&amp;#10;# set constants for the experiment&amp;#10;screen_refreshRate = win.getActualFrameRate()&amp;#10;ROTATION_SPEED = 1;&amp;#10;CIRCLE_RADIUS = 3;&amp;#10;#SHIELD_GROWTH_SPEED = 20; # in degrees&amp;#10;#minShieldDegrees = 20;&amp;#10;#maxShieldDegrees = 60;&amp;#10;&amp;#10;# initialise variables that will be updated as experiment progresses&amp;#10;# shield variables&amp;#10;shieldDegrees = 40; #because it needs to be predefined&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX = np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY = np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;shieldRotation = 360; #begin at top&amp;#10;&amp;#10;#reward variables&amp;#10;totalReward_tot = 0;&amp;#10;lossFactor = 0.003;&amp;#10;totalReward_text = '';&amp;#10;&amp;#10;#progress circle variables&amp;#10;pc_orientation = 0;&amp;#10;pc_degrees = 0;&amp;#10;pc_X=np.sin(np.arange(np.radians(-pc_degrees),np.radians(pc_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pc_Y=np.cos(np.arange(np.radians(-pc_degrees),np.radians(pc_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pc_X = np.concatenate(([0],pc_X));&amp;#10;pc_Y = np.concatenate(([0],pc_Y));&amp;#10;pc_coords = np.transpose(np.vstack((pc_X,pc_Y)))&amp;#10;&amp;#10;hgf = 0;&amp;#10;&amp;#10;#initialise variables that will be updated as experiment progresses&amp;#10;# needed??&amp;#10;# block start and end texts&amp;#10;#blockStartTxt = &quot;block 1 out of 4&quot;&amp;#10;#instructed training variables&amp;#10;#training_loop_count = -1&amp;#10;#target_orientation = 0&amp;#10;#reward variables&amp;#10;red_bar_length = 0&amp;#10;#bar_length = 0.5&amp;#10;#bar_position = -0.05&amp;#10;#totalReward_tot = 0&amp;#10;#reward_change_colour = [1, -1, -1]&amp;#10;#totalReward_text = ''&amp;#10;&amp;#10;# triggers&amp;#10;triggers = dict(&amp;#10;    exp_start=100,&amp;#10;    exp_end=101,&amp;#10;    block_start=80,&amp;#10;    block_end=90,&amp;#10;    last_frame=99,&amp;#10;    laser_hit=10,&amp;#10;    laser_miss=20,&amp;#10;    key_right=30,&amp;#10;    key_left=40,&amp;#10;    key_release=50,&amp;#10;    tone_1=1,&amp;#10;    tone_2=2&amp;#10;)&amp;#10;&amp;#10;if send_triggers:&amp;#10;    def send_trigger(triggerValue):&amp;#10;        &quot;&quot;&quot;&amp;#10;        code: expects an integer code (up to a maximum of 127, because of the serial port being weird)to send to the EEG)&amp;#10;        &quot;&quot;&quot;&amp;#10;        # actual sending of trigger looks like this&amp;#10;        win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;else:&amp;#10;    def send_trigger(code):&amp;#10;        print('sending trigger: ' + str(code))&amp;#10;        &amp;#10;trig = triggers['exp_start']&amp;#10;#send_trigger(trig)" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="import * as np from 'numpy';&amp;#10;import * as os from 'os';&amp;#10;var CIRCLE_RADIUS, ROTATION_SPEED, dataRoot, hgf, imageRoot, kb, key_left, key_right, keys_move, lossFactor, pc_X, pc_Y, pc_coords, pc_degrees, pc_orientation, phaseN, red_bar_length, saveData, saveFilename, screen_refreshRate, send_triggers, sequenceRoot, sessionFileName, shieldCoords, shieldDegrees, shieldHeight, shieldRotation, shieldWidth, shieldX, shieldY, totalReward_text, totalReward_tot, trig, triggers;&amp;#10;phaseN = 0;&amp;#10;send_triggers = false;&amp;#10;sequenceRoot = &quot;sequences/&quot;;&amp;#10;dataRoot = &quot;data/&quot;;&amp;#10;imageRoot = &quot;images/&quot;;&amp;#10;sessionFileName = (((sequenceRoot + &quot;cogpsy_main_v1_order&quot;) + expInfo[&quot;order&quot;].toString()) + &quot;/session_s1_main_v1.csv&quot;);&amp;#10;saveData = [[&quot;phase&quot;, &quot;blockID&quot;, &quot;currentFrame&quot;, &quot;laserRotation&quot;, &quot;shieldRotation&quot;, &quot;shieldDegrees&quot;, &quot;currentHit&quot;, &quot;totalReward&quot;, &quot;sendTrigger&quot;, &quot;triggerValue&quot;, &quot;trueMean&quot;, &quot;trueVariance&quot;, &quot;volatility&quot;, &quot;toneTrigger&quot;, &quot;toneVolatility&quot;, &quot;toneIndex&quot;, &quot;toneEndFrame&quot;]];&amp;#10;saveFilename = (((dataRoot + &quot;sub-&quot;) + expInfo[&quot;participant&quot;].toString()) + &quot;_task-laser.csv&quot;);&amp;#10;psychoJS.window.mouseVisible = false;&amp;#10;kb = new keyboard.Keyboard();&amp;#10;keys_move = [&quot;2&quot;, &quot;1&quot;];&amp;#10;key_right = &quot;2&quot;;&amp;#10;key_left = &quot;1&quot;;&amp;#10;screen_refreshRate = psychoJS.window.getActualFrameRate();&amp;#10;ROTATION_SPEED = 1;&amp;#10;CIRCLE_RADIUS = 3;&amp;#10;shieldDegrees = 40;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;shieldRotation = 360;&amp;#10;totalReward_tot = 0;&amp;#10;lossFactor = 0.003;&amp;#10;totalReward_text = &quot;&quot;;&amp;#10;pc_orientation = 0;&amp;#10;pc_degrees = 0;&amp;#10;pc_X = ((np.sin(np.arange(np.radians((- pc_degrees)), np.radians(pc_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pc_Y = ((np.cos(np.arange(np.radians((- pc_degrees)), np.radians(pc_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pc_X = np.concatenate([[0], pc_X]);&amp;#10;pc_Y = np.concatenate([[0], pc_Y]);&amp;#10;pc_coords = np.transpose(np.vstack([pc_X, pc_Y]));&amp;#10;hgf = 0;&amp;#10;red_bar_length = 0;&amp;#10;triggers = dict({&quot;exp_start&quot;: 100, &quot;exp_end&quot;: 101, &quot;block_start&quot;: 80, &quot;block_end&quot;: 90, &quot;last_frame&quot;: 99, &quot;laser_hit&quot;: 10, &quot;laser_miss&quot;: 20, &quot;key_right&quot;: 30, &quot;key_left&quot;: 40, &quot;key_release&quot;: 50, &quot;tone_1&quot;: 1, &quot;tone_2&quot;: 2});&amp;#10;if (send_triggers) {&amp;#10;    function send_trigger(triggerValue) {&amp;#10;        /*&amp;#10;        code: expects an integer code (up to a maximum of 127, because of the serial port being weird)to send to the EEG)&amp;#10;        */&amp;#10;        psychoJS.window.callOnFlip(trialTrigger.setData, Number.parseInt(triggerValue));&amp;#10;    }&amp;#10;} else {&amp;#10;    function send_trigger(code) {&amp;#10;        console.log((&quot;sending trigger: &quot; + code.toString()));&amp;#10;    }&amp;#10;}&amp;#10;trig = triggers[&quot;exp_start&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_start" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextboxComponent name="title">
        <Param val="center" valType="str" updates="constant" name="alignment"/>
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="autoLog"/>
        <Param val="True" valType="bool" updates="constant" name="bold"/>
        <Param val="None" valType="color" updates="constant" name="borderColor"/>
        <Param val="2" valType="num" updates="constant" name="borderWidth"/>
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="editable"/>
        <Param val="None" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="1.0" valType="num" updates="constant" name="lineSpacing"/>
        <Param val="title" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="0" valType="num" updates="constant" name="padding"/>
        <Param val="(0, 0.35)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(None, None)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Save-the-world task" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </TextboxComponent>
      <TextComponent name="text_instructions_1">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_instructions_1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Welcome to the Save-the-world game!&amp;#10;&amp;#10;Mysterious radioactive sources have just landed on Earth and are emitting radiation that is harmful to our planet.&amp;#10;&amp;#10;Your task is to catch the radiation beams with an absorbing shield. You will have to navigate the shield and position it wisely to minimise the damage caused by these sources. Help us save the world!&amp;#10;&amp;#10;Press any key to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_i1">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_i1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <ParallelOutComponent name="instructions_trigger">
        <Param val="0x4FF8" valType="str" updates="None" name="address"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="instructions_trigger" valType="code" updates="None" name="name"/>
        <Param val="EIO" valType="str" updates="None" name="register"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="100" valType="code" updates="None" name="startData"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="0" valType="code" updates="None" name="stopData"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.05" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreen"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
      </ParallelOutComponent>
    </Routine>
    <Routine name="practice_move">
      <CodeComponent name="code_move">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="shieldRotation = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="shieldRotation = 0; #begin at top" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_move" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="shield_move">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_move" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_centre_move">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="blue" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="blue" valType="color" updates="constant" name="lineColor"/>
        <Param val="3" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_centre_move" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="set every frame" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.1]]" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_bg_short_move">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_bg_short_move" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <ImageComponent name="radioactive_move">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/radioactive1.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="radioactive_move" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.5)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_move_s1">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_move_s1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Your shield can be positioned anywhere on a circle around the harmful radiation source. To navigate the shield, use the &quot;1&quot; and &quot;2&quot; buttons on your response box. Try moving the shield now!" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_advance_move_s1">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_advance_move_s1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, -0.25)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="If you have understood how to move the shield, &amp;#10;press button &quot;3&quot; to advance to the next screen." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_move_s1">
        <Param val="'3'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_move_s1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <ParallelOutComponent name="moveTraining_trigger">
        <Param val="0x4FF8" valType="str" updates="None" name="address"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="moveTraining_trigger" valType="code" updates="None" name="name"/>
        <Param val="EIO" valType="str" updates="None" name="register"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="101" valType="code" updates="None" name="startData"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="0" valType="code" updates="None" name="stopData"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.05" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreen"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
      </ParallelOutComponent>
    </Routine>
    <Routine name="instructions_mainTask">
      <TextComponent name="text_mainTask">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.04" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_mainTask" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Are you ready to start the game?&amp;#10;&amp;#10;In the actual game:&amp;#10;&amp;#10;1. You will not see the reward bar - but the rules for earning money remain the same, and you will receive feedback about your reward after every block.&amp;#10;&amp;#10;2. We ask you to please focus your eyes on the centre of the radioactive source and don't follow the beams with your eyes. This is to minimise eye-movement artefacts in the MEG data.&amp;#10;&amp;#10;3. You will hear tones through your headphones while you play the game. These tones are completely unrelated to the task - you can ignore them and focus on catching the beams.&amp;#10;&amp;#10;Press any key to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="1.5" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_mainTask">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_mainTask" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="practiceBlock">
      <CodeComponent name="code_practiceBlock">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="phaseN = 0;&amp;#10;blockID = 0;&amp;#10;sourceImageFile = os.path.join(imageRoot, &quot;radioactive1.png&quot;);&amp;#10;volatility = 2;&amp;#10;toneTrigger = 0;&amp;#10;toneVolatility = 0;&amp;#10;toneIndex = 0;&amp;#10;toneEndFrame = 0;&amp;#10;block_path = (sequenceRoot + &quot;practice_v1_block1.csv&quot;);&amp;#10;f = open(block_path, &quot;r&quot;);&amp;#10;storedStream_np = [];&amp;#10;for (var line, _pj_c = 0, _pj_a = f, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    line = _pj_a[_pj_c];&amp;#10;    words = line.split(&quot;,&quot;);&amp;#10;    storedStream_np.push([words[0], words[1], words[2]]);&amp;#10;}&amp;#10;nFrames = (storedStream_np.length - 2);&amp;#10;currentFrame = 0;&amp;#10;storedStream_np.pop(0);&amp;#10;trueMean = Number.parseFloat(storedStream_np[0][0]);&amp;#10;laserRotation = Number.parseFloat(storedStream_np[0][1]);&amp;#10;trueVariance = Number.parseFloat(storedStream_np[0][2]);&amp;#10;triggerValue = 11;&amp;#10;sendTrigger = true;&amp;#10;sendResponseTriggers = true;&amp;#10;totalReward = 1;&amp;#10;hit_i = 0;&amp;#10;first_hit = 0;&amp;#10;shieldRotation = 360;&amp;#10;shieldDegrees = 20;&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;laserXcoord = (CIRCLE_RADIUS * Math.cos(deg2rad(laserRotation)));&amp;#10;laserYcoord = (CIRCLE_RADIUS * Math.sin(deg2rad(laserRotation)));&amp;#10;[unique, counts] = np.unique(storedStream_np, {&quot;return_counts&quot;: true});&amp;#10;laser_on = Math.min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;laser_practice.setAutoDraw(false);&amp;#10;laser_long_practice.setAutoDraw(false);&amp;#10;pc_orientation = 0;&amp;#10;pc_degrees = 0;&amp;#10;pc_X = ((np.sin(np.arange(np.radians((- pc_degrees)), np.radians(pc_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pc_Y = ((np.cos(np.arange(np.radians((- pc_degrees)), np.radians(pc_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pc_X = np.concatenate([[0], pc_X]);&amp;#10;pc_Y = np.concatenate([[0], pc_Y]);&amp;#10;pc_coords = np.transpose(np.vstack([pc_X, pc_Y]));&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# this is phase 0 (practice)&amp;#10;phaseN = 0&amp;#10;blockID = 0&amp;#10;&amp;#10;# radioactive source image: yellow&amp;#10;sourceImageFile = os.path.join(imageRoot,&quot;radioactive1.png&quot;)&amp;#10;volatility = 2&amp;#10;&amp;#10;# we do not present any tones in this block&amp;#10;toneTrigger = 0&amp;#10;toneVolatility = 0&amp;#10;toneIndex = 0&amp;#10;toneEndFrame = 0&amp;#10;&amp;#10;#load stimulusStream into NumPy array&amp;#10;block_path = sequenceRoot + &quot;practice_v1_block1.csv&quot;&amp;#10;f = open(block_path, 'r')&amp;#10;storedStream_np = []&amp;#10;for line in f:&amp;#10;    words = line.split(',')&amp;#10;    storedStream_np.append((words[0], words[1], words[2]))&amp;#10;    &amp;#10;# calculate the total number of frames in this block&amp;#10;nFrames = len(storedStream_np) - 2&amp;#10;currentFrame = 0&amp;#10;&amp;#10;#the ValueError: could not convert string to float error originates here&amp;#10;#need to start reading from the 2nd row rather than the 1st row (with header text)&amp;#10;#let's get rid of the first row since it's giving us headaches&amp;#10;storedStream_np.pop(0)&amp;#10;&amp;#10;trueMean = float(storedStream_np[0][0])&amp;#10;laserRotation = float(storedStream_np[0][1])&amp;#10;trueVariance = float(storedStream_np[0][2])&amp;#10;&amp;#10;#initialise variables that will be updated as experiment progresses&amp;#10;triggerValue = 11&amp;#10;sendTrigger = True&amp;#10;#start by sending a trigger when subject presses a button&amp;#10;sendResponseTriggers = True&amp;#10;totalReward = 1;&amp;#10;hit_i = 0&amp;#10;first_hit = 0&amp;#10;&amp;#10;shieldRotation = 360 #begin at top&amp;#10;shieldDegrees = 20; #because it needs to be predefined&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;#calculate the screen X and Y locations that correspond to the shield centre&amp;#10;shieldX=np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY=np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;#update variables to draw polygon&amp;#10;laserXcoord = CIRCLE_RADIUS*cos(deg2rad(laserRotation));&amp;#10;laserYcoord = CIRCLE_RADIUS*sin(deg2rad(laserRotation));&amp;#10;&amp;#10;# laser variables&amp;#10;unique, counts = np.unique(storedStream_np, return_counts=True);&amp;#10;laser_on = min(counts);&amp;#10;laser_frame_ct = 0;&amp;#10;&amp;#10;laser_practice.setAutoDraw(False);&amp;#10;laser_long_practice.setAutoDraw(False);&amp;#10;&amp;#10;#progress circle variables&amp;#10;pc_orientation = 0;&amp;#10;pc_degrees = 0;&amp;#10;pc_X=np.sin(np.arange(np.radians(-pc_degrees),np.radians(pc_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pc_Y=np.cos(np.arange(np.radians(-pc_degrees),np.radians(pc_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pc_X = np.concatenate(([0],pc_X));&amp;#10;pc_Y = np.concatenate(([0],pc_Y));&amp;#10;pc_coords = np.transpose(np.vstack((pc_X,pc_Y)))" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="#determine whether laser is crossing the shield&amp;#10;if hit_i:&amp;#10;    hit_i = 0&amp;#10;else:&amp;#10;    if first_hit:&amp;#10;        laser_long_practice.setAutoDraw(True)&amp;#10;        &amp;#10;if totalReward &lt;= 0:&amp;#10;    totalReward = 0.1;&amp;#10;&amp;#10;#do not send a trigger on every frame, only if laser position changes or subject presses a button&amp;#10;sendTrigger = False&amp;#10;keyReleaseThisFrame = False&amp;#10;triggerValue = 0&amp;#10;send_trigger(triggerValue)&amp;#10;#win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;&amp;#10;#first, find out if L/R keys have been *released*&amp;#10;LRkeys_released = kb.getKeys(keyList=keys_move,clear=True,waitRelease=True)&amp;#10;if len(LRkeys_released)&gt;0: #if so, then flush out the keys one final time&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=True,waitRelease=False)&amp;#10;    triggerValue = 7&amp;#10;    sendTrigger = True&amp;#10;    send_trigger(triggerValue)&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;    keyReleaseThisFrame = True&amp;#10;else: #otherwise, put the currently pressed keys into a list, finishing with the most recently pressed&amp;#10;    LRkeys_pressed = kb.getKeys(keyList=keys_move,clear=False,waitRelease=False)&amp;#10;&amp;#10;#if key is pressed, rotate cursor&amp;#10;#using most recently pressed key&amp;#10;if len(LRkeys_pressed)&gt;0:&amp;#10;    if LRkeys_pressed[-1]==key_right:&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3&amp;#10;    if LRkeys_pressed[-1]==key_left:&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4&amp;#10;    if sendResponseTriggers:&amp;#10;        triggerValue = newTriggerValue&amp;#10;        sendTrigger = True&amp;#10;        send_trigger(triggerValue)&amp;#10;        #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;        #stop triggering responses until key has been released again&amp;#10;        sendResponseTriggers = False&amp;#10;&amp;#10;shieldWidth = np.sin(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;shieldHeight = np.cos(np.radians(shieldDegrees))*CIRCLE_RADIUS*1.5;&amp;#10;&amp;#10;shieldX = np.sin(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldY = np.cos(np.arange(np.radians(-shieldDegrees),np.radians(shieldDegrees),np.radians(shieldDegrees)/20))*CIRCLE_RADIUS*1.1;&amp;#10;shieldX = np.concatenate(([0],shieldX));&amp;#10;shieldY = np.concatenate(([0],shieldY));&amp;#10;shieldCoords = np.transpose(np.vstack((shieldX,shieldY)))&amp;#10;&amp;#10;if currentFrame&lt;nFrames:&amp;#10;    laserRotation = float(storedStream_np[currentFrame][1])#storedStream_np[currentFrame,1];&amp;#10;    trueMean = float(storedStream_np[currentFrame][0])#storedStream_np[currentFrame,0];&amp;#10;    trueVariance = float(storedStream_np[currentFrame][2])#storedStream_np[currentFrame,2];&amp;#10;    if currentFrame &gt; 0:&amp;#10;        if float(storedStream_np[currentFrame][1]) != float(storedStream_np[currentFrame-1][1]):#storedStream_np[currentFrame - 1, 1]:&amp;#10;        #if currentFrame &gt; 1:&amp;#10;            laser_frame_ct = 0;&amp;#10;        else:&amp;#10;            laser_frame_ct = laser_frame_ct + 1;&amp;#10;&amp;#10;        if laser_frame_ct &lt;= laser_on:&amp;#10;            laser_practice.setAutoDraw(True);&amp;#10;            laser_long_practice.setAutoDraw(True);&amp;#10;        else:&amp;#10;            laser_practice.setAutoDraw(False);&amp;#10;            laser_long_practice.setAutoDraw(False);&amp;#10;&amp;#10;#calculate whether shield is currently hit by laser&amp;#10;currentHit = (shieldRotation - laserRotation + shieldDegrees)%360 &lt;= (2*shieldDegrees);&amp;#10;&amp;#10;#determine whether laser position has changed&amp;#10;if currentFrame == 0:&amp;#10;    if not sendTrigger:&amp;#10;        #we'll send different stim change triggers depending on hit/no-hit&amp;#10;        if currentHit:&amp;#10;            triggerValue = 1&amp;#10;        else:&amp;#10;            triggerValue = 2&amp;#10;&amp;#10;        sendTrigger = True&amp;#10;        send_trigger(triggerValue)&amp;#10;        #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;    if currentHit:&amp;#10;        totalReward = totalReward;&amp;#10;        hit_i = 1;&amp;#10;        first_hit = 1;&amp;#10;    else:&amp;#10;        if totalReward &gt; 0:&amp;#10;            totalReward = totalReward - lossFactor;&amp;#10;        else:&amp;#10;            totalReward = 0;&amp;#10;        &amp;#10;if currentFrame &gt; 0:&amp;#10;    if float(storedStream_np[currentFrame][1]) != float(storedStream_np[currentFrame-1][1]):&amp;#10;        #we only send a stimulus trigger if we don't already have a response to send&amp;#10;        if not sendTrigger:&amp;#10;            #we'll send different stim change triggers depending on hit/no-hit&amp;#10;            if currentHit:&amp;#10;                triggerValue = 1&amp;#10;            else:&amp;#10;                triggerValue = 2&amp;#10;&amp;#10;            sendTrigger = True&amp;#10;            send_trigger(triggerValue)&amp;#10;            #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;        if currentHit:&amp;#10;            totalReward = totalReward;&amp;#10;            hit_i = 1;&amp;#10;            first_hit = 1;&amp;#10;        else:&amp;#10;            if totalReward &gt; 0:&amp;#10;                totalReward = totalReward - lossFactor;&amp;#10;            else:&amp;#10;                totalReward = 0;&amp;#10;&amp;#10;#update the shieldRedness according to whether we are currently hitting/missing the shield&amp;#10;if currentHit:&amp;#10;    laser_long_opacity = 0;    &amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;else:&amp;#10;    laser_long_opacity = 1&amp;#10;    shieldColour = [1, 1-(1-laser_long_opacity), 1-(1-laser_long_opacity)];&amp;#10;&amp;#10;if keyReleaseThisFrame:&amp;#10;    sendResponseTriggers = True&amp;#10;    &amp;#10;if currentFrame&lt;nFrames:&amp;#10;    saveData.append([phaseN,blockID,currentFrame,laserRotation,&amp;#10;        shieldRotation,shieldDegrees,currentHit,totalReward,&amp;#10;        sendTrigger,triggerValue,trueMean,trueVariance,volatility,&amp;#10;        toneTrigger,toneVolatility,toneIndex,toneEndFrame])&amp;#10;    currentFrame = currentFrame + 1;&amp;#10;else:&amp;#10;    triggerValue = 99&amp;#10;    sendTrigger = True&amp;#10;    send_trigger(triggerValue)&amp;#10;    #win.callOnFlip(trialTrigger.setData, int(triggerValue))&amp;#10;&amp;#10;pc_orientation = pc_orientation + (360/nFrames)/2;&amp;#10;pc_degrees = pc_degrees + (360/nFrames)/2;&amp;#10;pc_X=np.sin(np.arange(np.radians(-pc_degrees),np.radians(pc_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pc_Y=np.cos(np.arange(np.radians(-pc_degrees),np.radians(pc_degrees),np.radians(10)/20))*CIRCLE_RADIUS*1.1;&amp;#10;pc_X = np.concatenate(([0],pc_X));&amp;#10;pc_Y = np.concatenate(([0],pc_Y));&amp;#10;pc_coords = np.transpose(np.vstack((pc_X,pc_Y)));" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (hit_i) {&amp;#10;    hit_i = 0;&amp;#10;} else {&amp;#10;    if (first_hit) {&amp;#10;        laser_long_practice.setAutoDraw(true);&amp;#10;    }&amp;#10;}&amp;#10;if ((totalReward &lt;= 0)) {&amp;#10;    totalReward = 0.1;&amp;#10;}&amp;#10;sendTrigger = false;&amp;#10;keyReleaseThisFrame = false;&amp;#10;triggerValue = 0;&amp;#10;send_trigger(triggerValue);&amp;#10;LRkeys_released = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: true});&amp;#10;if ((LRkeys_released.length &gt; 0)) {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: true, &quot;waitRelease&quot;: false});&amp;#10;    triggerValue = 7;&amp;#10;    sendTrigger = true;&amp;#10;    send_trigger(triggerValue);&amp;#10;    keyReleaseThisFrame = true;&amp;#10;} else {&amp;#10;    LRkeys_pressed = kb.getKeys({&quot;keyList&quot;: keys_move, &quot;clear&quot;: false, &quot;waitRelease&quot;: false});&amp;#10;}&amp;#10;if ((LRkeys_pressed.length &gt; 0)) {&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_right)) {&amp;#10;        shieldRotation += ROTATION_SPEED;&amp;#10;        newTriggerValue = 3;&amp;#10;    }&amp;#10;    if ((LRkeys_pressed.slice((- 1))[0] === key_left)) {&amp;#10;        shieldRotation -= ROTATION_SPEED;&amp;#10;        newTriggerValue = 4;&amp;#10;    }&amp;#10;    if (sendResponseTriggers) {&amp;#10;        triggerValue = newTriggerValue;&amp;#10;        sendTrigger = true;&amp;#10;        send_trigger(triggerValue);&amp;#10;        sendResponseTriggers = false;&amp;#10;    }&amp;#10;}&amp;#10;shieldWidth = ((np.sin(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldHeight = ((np.cos(np.radians(shieldDegrees)) * CIRCLE_RADIUS) * 1.5);&amp;#10;shieldX = ((np.sin(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldY = ((np.cos(np.arange(np.radians((- shieldDegrees)), np.radians(shieldDegrees), (np.radians(shieldDegrees) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;shieldX = np.concatenate([[0], shieldX]);&amp;#10;shieldY = np.concatenate([[0], shieldY]);&amp;#10;shieldCoords = np.transpose(np.vstack([shieldX, shieldY]));&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    laserRotation = Number.parseFloat(storedStream_np[currentFrame][1]);&amp;#10;    trueMean = Number.parseFloat(storedStream_np[currentFrame][0]);&amp;#10;    trueVariance = Number.parseFloat(storedStream_np[currentFrame][2]);&amp;#10;    if ((currentFrame &gt; 0)) {&amp;#10;        if ((Number.parseFloat(storedStream_np[currentFrame][1]) !== Number.parseFloat(storedStream_np[(currentFrame - 1)][1]))) {&amp;#10;            laser_frame_ct = 0;&amp;#10;        } else {&amp;#10;            laser_frame_ct = (laser_frame_ct + 1);&amp;#10;        }&amp;#10;        if ((laser_frame_ct &lt;= laser_on)) {&amp;#10;            laser_practice.setAutoDraw(true);&amp;#10;            laser_long_practice.setAutoDraw(true);&amp;#10;        } else {&amp;#10;            laser_practice.setAutoDraw(false);&amp;#10;            laser_long_practice.setAutoDraw(false);&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;currentHit = ((((shieldRotation - laserRotation) + shieldDegrees) % 360) &lt;= (2 * shieldDegrees));&amp;#10;if ((currentFrame === 0)) {&amp;#10;    if ((! sendTrigger)) {&amp;#10;        if (currentHit) {&amp;#10;            triggerValue = 1;&amp;#10;        } else {&amp;#10;            triggerValue = 2;&amp;#10;        }&amp;#10;        sendTrigger = true;&amp;#10;        send_trigger(triggerValue);&amp;#10;    }&amp;#10;    if (currentHit) {&amp;#10;        totalReward = totalReward;&amp;#10;        hit_i = 1;&amp;#10;        first_hit = 1;&amp;#10;    } else {&amp;#10;        if ((totalReward &gt; 0)) {&amp;#10;            totalReward = (totalReward - lossFactor);&amp;#10;        } else {&amp;#10;            totalReward = 0;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((currentFrame &gt; 0)) {&amp;#10;    if ((Number.parseFloat(storedStream_np[currentFrame][1]) !== Number.parseFloat(storedStream_np[(currentFrame - 1)][1]))) {&amp;#10;        if ((! sendTrigger)) {&amp;#10;            if (currentHit) {&amp;#10;                triggerValue = 1;&amp;#10;            } else {&amp;#10;                triggerValue = 2;&amp;#10;            }&amp;#10;            sendTrigger = true;&amp;#10;            send_trigger(triggerValue);&amp;#10;        }&amp;#10;        if (currentHit) {&amp;#10;            totalReward = totalReward;&amp;#10;            hit_i = 1;&amp;#10;            first_hit = 1;&amp;#10;        } else {&amp;#10;            if ((totalReward &gt; 0)) {&amp;#10;                totalReward = (totalReward - lossFactor);&amp;#10;            } else {&amp;#10;                totalReward = 0;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (currentHit) {&amp;#10;    laser_long_opacity = 0;&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;} else {&amp;#10;    laser_long_opacity = 1;&amp;#10;    shieldColour = [1, (1 - (1 - laser_long_opacity)), (1 - (1 - laser_long_opacity))];&amp;#10;}&amp;#10;if (keyReleaseThisFrame) {&amp;#10;    sendResponseTriggers = true;&amp;#10;}&amp;#10;if ((currentFrame &lt; nFrames)) {&amp;#10;    saveData.push([phaseN, blockID, currentFrame, laserRotation, shieldRotation, shieldDegrees, currentHit, totalReward, sendTrigger, triggerValue, trueMean, trueVariance, volatility, toneTrigger, toneVolatility, toneIndex, toneEndFrame]);&amp;#10;    currentFrame = (currentFrame + 1);&amp;#10;} else {&amp;#10;    triggerValue = 99;&amp;#10;    sendTrigger = true;&amp;#10;    send_trigger(triggerValue);&amp;#10;}&amp;#10;pc_orientation = (pc_orientation + ((360 / nFrames) / 2));&amp;#10;pc_degrees = (pc_degrees + ((360 / nFrames) / 2));&amp;#10;pc_X = ((np.sin(np.arange(np.radians((- pc_degrees)), np.radians(pc_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pc_Y = ((np.cos(np.arange(np.radians((- pc_degrees)), np.radians(pc_degrees), (np.radians(10) / 20))) * CIRCLE_RADIUS) * 1.1);&amp;#10;pc_X = np.concatenate([[0], pc_X]);&amp;#10;pc_Y = np.concatenate([[0], pc_Y]);&amp;#10;pc_coords = np.transpose(np.vstack([pc_X, pc_Y]));&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="totalReward_text = `£${totalReward}`;&amp;#10;np.savetxt(saveFilename, saveData, {&quot;delimiter&quot;: &quot;,&quot;, &quot;fmt&quot;: &quot;%s&quot;});&amp;#10;triggerValue = 0;&amp;#10;send_trigger(triggerValue);&amp;#10;sendTrigger = false;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="# this block will not count towards the total reward&amp;#10;#totalReward_tot = totalReward_tot + totalReward&amp;#10;totalReward_text = &quot;£%.2f&quot; %(totalReward)&amp;#10;&amp;#10;# save the output data for this block&amp;#10;np.savetxt(saveFilename,saveData,delimiter=&quot;,&quot;,fmt=&quot;%s&quot;)&amp;#10;#win.callOnFlip(trialTrigger.setData, int(0))&amp;#10;triggerValue = 0&amp;#10;send_trigger(triggerValue)&amp;#10;sendTrigger = False" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_practiceBlock" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="harmless_area_practice">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[0, 0, 0]" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="harmless_area_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="(6.6, 6.6)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_practice">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$shieldColour" valType="color" updates="set every frame" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1.1, 1.1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_centre_practice">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="blue" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="blue" valType="color" updates="constant" name="lineColor"/>
        <Param val="3" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_centre_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="set every frame" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.2]]" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="shield_bg_short_practice">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[0, 0, 0]" valType="color" updates="set every frame" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="shield_bg_short_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="shieldRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="shieldCoords" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="laser_practice">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="red" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="red" valType="color" updates="constant" name="lineColor"/>
        <Param val="10" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="laser_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="laserRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.1]]" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="laser_long_practice">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="red" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="red" valType="color" updates="constant" name="lineColor"/>
        <Param val="10" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="laser_long_practice" valType="code" updates="None" name="name"/>
        <Param val="laser_long_opacity" valType="num" updates="set every frame" name="opacity"/>
        <Param val="laserRotation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(1, 1)" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="[[0, 0], [0, CIRCLE_RADIUS*1.4]]" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="progress_bar_practice">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="green" valType="color" updates="constant" name="lineColor"/>
        <Param val="10" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="progress_bar_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="pc_orientation" valType="num" updates="set every frame" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="custom polygon..." valType="str" updates="None" name="shape"/>
        <Param val="(0.3, 0.3)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
        <Param val="pc_coords" valType="list" updates="set every frame" name="vertices"/>
      </PolygonComponent>
      <ImageComponent name="radioactive_practice">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1, 1, 1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="$sourceImageFile" valType="file" updates="set every repeat" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="radioactive_practice" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(2, 2)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="frame N" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (frames)" valType="str" updates="None" name="stopType"/>
        <Param val="nFrames" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="cm" valType="str" updates="None" name="units"/>
      </ImageComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instructions_game"/>
    <Routine name="practice_move"/>
    <Routine name="reward"/>
    <Routine name="instructions_practiceBlock"/>
    <Routine name="practiceBlock"/>
    <Routine name="instructions_mainTask"/>
    <Routine name="radio_colours"/>
    <LoopInitiator loopType="TrialHandler" name="blocks">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$sessionFileName" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="blocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="blockStartText"/>
    <Routine name="trial"/>
    <Routine name="blockEndText"/>
    <LoopTerminator name="blocks"/>
    <Routine name="sessionEndText"/>
  </Flow>
</PsychoPy2experiment>
